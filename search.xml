<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>less压缩编译css</title>
      <link href="/2020/03/18/other/less/"/>
      <url>/2020/03/18/other/less/</url>
      
        <content type="html"><![CDATA[<p>使用npm包管理工具安装Less编译器</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install less -g</span><br></pre></td></tr></table></figure><p>//下面命令用于安装css压缩插件</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install less-plugin-clean-css -g</span><br></pre></td></tr></table></figure><p>//安装完成后就可以使用lessc的命令了</p><p>Less编译器用法：</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lessc bootstrap.less bootstrap.css</span><br></pre></td></tr></table></figure><p>//下面命令启用css压缩插件，生成压缩后的css文件</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lessc styles.less styles.min.css -clean-css</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 压缩 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js压缩 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用uglifyjs压缩JS</title>
      <link href="/2020/03/18/other/uglifyjs/"/>
      <url>/2020/03/18/other/uglifyjs/</url>
      
        <content type="html"><![CDATA[<h3 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h3><p>UglifyJS是个包含JS代码最小化、压缩工具集。</p><p> <strong><em>UglifyJS目前只能压缩JS代码，且只支持到ES5语法，尚不支持ES6。</em></strong></p><h3 id="2、安装"><a href="#2、安装" class="headerlink" title="2、安装"></a>2、安装</h3><p>UglifyJS基于Node.js开发，所以首先确保安装了Node.js环境。</p><p>如果想以一个独立命令的方式运行，则使用以下命令安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install uglify-js -g</span><br></pre></td></tr></table></figure><p>安装完成后，输入 uglifyjs -V 查看版本号，检测安装是否成功。<br>如果想作为一个模块通过代码调用，则使用以下命令安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install uglify-js --save-dev</span><br></pre></td></tr></table></figure><h3 id="3、用法"><a href="#3、用法" class="headerlink" title="3、用法"></a>3、用法</h3><p>UglifyJS的命令格式如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uglifyjs [input files] [options]</span><br></pre></td></tr></table></figure><p>输入文件既可以是单个，也可以是多个，建议传参时先传文件，再传选项。UglifyJS会根据传入选项，把文件放在队列中依次解释。</p><p>例如，有一个名为 copy.js的js代码文件如下。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params">argv</span>) </span>&#123;</span><br><span class="line">    fs.createReadStream(argv[<span class="number">0</span>]).pipe(fs.createWriteStream(argv[<span class="number">1</span>]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> args = process.argv.slice(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">if</span> (!!args &amp;&amp; args.length === <span class="number">2</span>) &#123;</span><br><span class="line">    main(args);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'args is invalid.'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们现在来测试UglifyJS的几个常用选项。</p><h4 id="3-1-o-输出"><a href="#3-1-o-输出" class="headerlink" title="3.1 -o 输出"></a>3.1 -o 输出</h4><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uglifyjs copy.js -o min.js</span><br></pre></td></tr></table></figure><p>上面命令传入 copy.js，输出到 min.js，结果如下。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs=<span class="built_in">require</span>(<span class="string">"fs"</span>);<span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params">argv</span>)</span>&#123;fs.createReadStream(argv[<span class="number">0</span>]).pipe(fs.createWriteStream(argv[<span class="number">1</span>]))&#125;<span class="keyword">var</span> args=process.argv.slice(<span class="number">2</span>);<span class="keyword">if</span>(!!args&amp;&amp;args.length===<span class="number">2</span>)&#123;main(args)&#125;</span><br></pre></td></tr></table></figure><p>可以看到，效果是代码去空格且合并到一行，但函数和变量名都不变。</p><h4 id="3-2-c-压缩"><a href="#3-2-c-压缩" class="headerlink" title="3.2 -c 压缩"></a>3.2 -c 压缩</h4><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uglifyjs copy.js -c -o min.js</span><br></pre></td></tr></table></figure><p>上面命令传入 copy.js，压缩输出到 min.js，结果如下。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs=<span class="built_in">require</span>(<span class="string">"fs"</span>);<span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params">argv</span>)</span>&#123;fs.createReadStream(argv[<span class="number">0</span>]).pipe(fs.createWriteStream(argv[<span class="number">1</span>]))&#125;<span class="keyword">var</span> args=process.argv.slice(<span class="number">2</span>);args&amp;&amp;<span class="number">2</span>===args.length&amp;&amp;main(args);</span><br></pre></td></tr></table></figure><p>和上一命令的效果基本相同，但把 if语句简化了。</p><h4 id="3-3-m-混淆"><a href="#3-3-m-混淆" class="headerlink" title="3.3 -m 混淆"></a>3.3 -m 混淆</h4><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uglifyjs copy.js -m -c -o min.js</span><br></pre></td></tr></table></figure><p>上面命令传入 copy.js，混淆+压缩输出到 min.js，结果如下。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs=<span class="built_in">require</span>(<span class="string">"fs"</span>);<span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params">r</span>)</span>&#123;fs.createReadStream(r[<span class="number">0</span>]).pipe(fs.createWriteStream(r[<span class="number">1</span>]))&#125;<span class="keyword">var</span> args=process.argv.slice(<span class="number">2</span>);args&amp;&amp;<span class="number">2</span>===args.length&amp;&amp;main(args);</span><br></pre></td></tr></table></figure><p>可以看到，混淆+压缩的效果，就是在前面基础上，把函数参数用最简字母代替了。</p><p>整体说来，UglifyJS的混淆比较轻量，只是简化了函数参数和变量名，而不会修改语法树。</p><h4 id="3-4-输入多文件"><a href="#3-4-输入多文件" class="headerlink" title="3.4 输入多文件"></a>3.4 输入多文件</h4><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uglifyjs copy.js copy2.js -m -c -o min.js</span><br></pre></td></tr></table></figure><p>上面命令传入 copy.js、 copy2.js，混淆+压缩输出到 min.js，结果如下。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs=<span class="built_in">require</span>(<span class="string">"fs"</span>);<span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params">e</span>)</span>&#123;fs.createReadStream(e[<span class="number">0</span>]).pipe(fs.createWriteStream(e[<span class="number">1</span>]))&#125;(args=process.argv.slice(<span class="number">2</span>))&amp;&amp;<span class="number">2</span>===args.length&amp;&amp;main(args);<span class="keyword">var</span> args;fs=<span class="built_in">require</span>(<span class="string">"fs"</span>);<span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params">e</span>)</span>&#123;fs.createReadStream(e[<span class="number">0</span>]).pipe(fs.createWriteStream(e[<span class="number">1</span>]))&#125;(args=process.argv.slice(<span class="number">2</span>))&amp;&amp;<span class="number">2</span>===args.length&amp;&amp;main(args);<span class="string">`</span></span><br></pre></td></tr></table></figure><p>可以看到，效果就是在前面基础上，把多个输入文件顺序合并到同一行了，同时对变量重复命名做了规避。</p>]]></content>
      
      
      <categories>
          
          <category> 压缩 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js压缩 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML中访问图片资源403问题</title>
      <link href="/2020/03/18/other/img403/"/>
      <url>/2020/03/18/other/img403/</url>
      
        <content type="html"><![CDATA[<h2 id="经过"><a href="#经过" class="headerlink" title="经过"></a>经过</h2><p>网站建设过程中，请求其他网站的图片，通过img的src加载时，报403。但是这个图片地址直接复制出来在地址栏打开是可以看到的。</p><p><img src="https://upload-images.jianshu.io/upload_images/3957667-19369bd22e528e66.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="16C25717-3336-4CC0-A9B3-941259C9C553.png"></p><p>解决方法： 在HTML代码的head中添加</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"referrer"</span> <span class="attr">content</span>=<span class="string">"no-referrer"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><h2 id="http请求中的referrer"><a href="#http请求中的referrer" class="headerlink" title="http请求中的referrer"></a>http请求中的referrer</h2><ul><li>http请求体的header中有一个referrer字段，用来表示发起http请求的源地址信息，这个referrer信息是可以省略但是不可修改的，就是说你只能设置是否带上这个referrer信息，不能定制referrer里面的值。</li><li>服务器端在拿到这个referrer值后就可以进行相关的处理，比如图片资源，可以通过referrer值判断请求是否来自本站，若不是则返回403或者重定向返回其他信息，从而实现图片的防盗链。上面出现403就是因为，请求的是别人服务器上的资源，但把自己的referrer信息带过去了，被对方服务器拦截返回了403。</li><li>在前端可以通过meta来设置referrer policy(来源策略)，具体可以设置哪些值以及对应的结果参考<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Referrer-Policy" target="_blank" rel="noopener">这里</a>。所以针对上面的403情况的解决方法，就是把referrer设置成<code>no-referrer</code>，这样发送请求不会带上referrer信息，对方服务器也就无法拦截了。</li><li>浏览器中referrer默认的值是no-referrer-when-downgrade，就是除了降级请求的情况以外都会带上referrer信息。降级请求是指https协议的地址去请求http协议，所以上面403的情况还有另一种解决方法就是，请求的图片地址换成http协议，自己的地址使用http协议，这样降级请求也不会带上referrer。</li></ul><h2 id="nginx配置图片防盗链"><a href="#nginx配置图片防盗链" class="headerlink" title="nginx配置图片防盗链"></a>nginx配置图片防盗链</h2><ul><li>最后再说一下这种根据referrer拦截，在服务器如何配置。我自己服务器用的nginx，这里就说下nginx的配置。首先打开nginx的配置文件:conf/nginx.conf，在server下面添加如下:<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> <span class="regexp">~* \.(gif|jpg|png|jpeg)$</span> &#123;</span><br><span class="line">   <span class="attribute">valid_referers</span> <span class="literal">none</span>  valid.url.com;</span><br><span class="line">   <span class="attribute">if</span> (<span class="variable">$invalid_referer</span>) &#123;</span><br><span class="line">        <span class="attribute">return</span> <span class="number">403</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>首先第一句以文件格式后缀匹配出图片资源路径，然后通过valid_referers添加合法的referer地址，加上none，表示没有传referer也是合法的，最后referer不合法的情况返回403。如果想跳其他地址或返回其他图片资源可以这样：rewrite xxx.xxx.com/xxx.jpg。</li></ul><h2 id="origin"><a href="#origin" class="headerlink" title="origin"></a>origin</h2><ul><li>http头部中还有一个与referrer类似的叫origin的字段，在发送跨域请求或预检请求(preflight request)时会带上这个参数，他用来表示发起请求的服务器地址，这个参数是必定会传的，然后服务器端用此字段来判断是否允许跨域。</li></ul>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图片访问403 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>escape、encodeURI和encodeURIComponent的区别</title>
      <link href="/2020/03/18/other/encodeURI/"/>
      <url>/2020/03/18/other/encodeURI/</url>
      
        <content type="html"><![CDATA[<h3 id="1、escape"><a href="#1、escape" class="headerlink" title="1、escape"></a>1、escape</h3><p>escape是对字符串(string)进行编码(而另外两种是对URL)，作用是让它们在所有电脑上可读。<br>编码之后的效果是%XX或者%uXXXX这种形式。<br>其中 ASCII字母、数字、@*/+ ，这几个字符不会被编码，其余的都会。<br>对应的解码unescape。<br>最关键的是，当你需要对URL编码时，请忘记这个方法，这个方法是针对字符串使用的，不适用于URL。</p><h3 id="2、encodeURI和encodeURIComponent"><a href="#2、encodeURI和encodeURIComponent" class="headerlink" title="2、encodeURI和encodeURIComponent"></a>2、encodeURI和encodeURIComponent</h3><p>对URL编码是常见的事，所以这两个方法应该是实际中要特别注意的。<br>它们都是编码URL，唯一区别就是编码的字符范围，其中:</p> <figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">encodeURI 方法不会对下列字符编码 ASCII字母、数字、~!@#$&amp;*()=:/,;?+'</span><br><span class="line">encodeURIComponent 方法不会对下列字符编码 ASCII字母、数字、~!*()'</span><br></pre></td></tr></table></figure><p>也就是encodeURIComponent编码的范围更广，会将 http://abc.com 中的//也编码， 会导致URL不可用。</p> <figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">encodeURI 对应的解码：decodeURI</span><br><span class="line">encodeURIComponent 对应的解码：decodeURIComponent</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> escape </tag>
            
            <tag> encodeURI </tag>
            
            <tag> encodeURIComponent </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git生成ssh</title>
      <link href="/2020/03/17/git/git-add-ssh/"/>
      <url>/2020/03/17/git/git-add-ssh/</url>
      
        <content type="html"><![CDATA[<h3 id="1、设置Git的user-name和email：-如果是第一次的话"><a href="#1、设置Git的user-name和email：-如果是第一次的话" class="headerlink" title="1、设置Git的user name和email：(如果是第一次的话)"></a>1、设置Git的user name和email：(如果是第一次的话)</h3><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">"pyang"</span></span><br><span class="line">$ git config --global user.email <span class="string">"11111@qq.com"</span></span><br></pre></td></tr></table></figure><p>这里的名字和邮箱 是对应的git的账号名称和注册邮箱</p><h3 id="2、生成密钥"><a href="#2、生成密钥" class="headerlink" title="2、生成密钥"></a>2、生成密钥</h3><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">"11111@qq.com"</span></span><br></pre></td></tr></table></figure><p>连续3个回车。如果不需要密码的话。<br>最后得到了两个文件：id_rsa和id_rsa.pub。</p><h3 id="3、登陆Github-添加-ssh-。"><a href="#3、登陆Github-添加-ssh-。" class="headerlink" title="3、登陆Github, 添加 ssh 。"></a>3、登陆Github, 添加 ssh 。</h3><p>把id_rsa.pub文件里的内容复制到这里<br><img src="/2020/03/17/git/git-add-ssh/1.png" alt="gitd"></p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git生成ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo图片问题</title>
      <link href="/2020/03/17/hexo/hexo-img/"/>
      <url>/2020/03/17/hexo/hexo-img/</url>
      
        <content type="html"><![CDATA[<h3 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h3><p>hexo博客图片的问题在于，markdown文章使用的图片路径和hexo博客发布时的图片路径不一致。</p><p>解决方式是使用 <strong>CodeFalling/hexo-asset-image</strong> 插件。</p><h3 id="1-post-asset-folder"><a href="#1-post-asset-folder" class="headerlink" title="1. post_asset_folder"></a>1. post_asset_folder</h3><p>首先确认_config.yml中有post_asset_folder:true。</p><p>Hexo提供了一种更方便管理Asset的设定：post_asset_folder<br>当您设置post_asset_folder为true参数后，在建立文件时，Hexo<br>会自动建立一个与文章同名的文件夹；以前的文章也可以自己手动创建同名文件夹。</p><h3 id="2-安装-hexo-asset-image-在hexo的目录下执行"><a href="#2-安装-hexo-asset-image-在hexo的目录下执行" class="headerlink" title="2. 安装 hexo-asset-image 在hexo的目录下执行"></a>2. 安装 hexo-asset-image 在hexo的目录下执行</h3><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install https://github.com/CodeFalling/hexo-asset-image --save</span><br></pre></td></tr></table></figure><h3 id="3-使用"><a href="#3-使用" class="headerlink" title="3. 使用"></a>3. 使用</h3><p>完成安装后用hexo新建文章的时候会发现_posts目录下面会多出一个和文章名字一样的文件夹。图片就可以放在文件夹下面。结构如下：</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git</span><br><span class="line">  ├── logo.jpg</span><br><span class="line">git.md</span><br></pre></td></tr></table></figure><p>这样的目录结构（目录名和文章名一致），<br>只要使用 </p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](git/logo.jpg)</span><br></pre></td></tr></table></figure><p>就可以插入图片。其中[]里面不写文字则没有图片标题。<br>生成的结构为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public&#x2F;2016&#x2F;3&#x2F;9&#x2F;git</span><br><span class="line">                ├── index.html</span><br><span class="line">                ├── logo.jpg</span><br></pre></td></tr></table></figure><p>同时，生成的 html 是</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](/2016/3/9/git/logo.jpg)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Hexo文章图片 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客搭建</title>
      <link href="/2020/03/17/hexo/hexo/"/>
      <url>/2020/03/17/hexo/hexo/</url>
      
        <content type="html"><![CDATA[<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>Node.js (Node.js 版本需不低于 8.10，建议使用 Node.js 10.0 及以上版本)</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://github.com/microacup/hexo-theme-microb" target="_blank" rel="noopener">hexo-theme-microb</a></p><p><a href="https://github.com/KevinOfNeu/hexo-theme-xoxo" target="_blank" rel="noopener">hexo-theme-xoxo</a></p><h3 id="快速使用"><a href="#快速使用" class="headerlink" title="快速使用"></a>快速使用</h3><h4 id="配置菜单"><a href="#配置菜单" class="headerlink" title="配置菜单"></a>配置菜单</h4><p>  在主题<code>_config.yml</code> 中配置menu选项：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># main menu navigation</span><br><span class="line">menu:</span><br><span class="line">  home: &#x2F;</span><br><span class="line">  tags: &#x2F;tags</span><br><span class="line">  search: &#x2F;search</span><br><span class="line">  about: &#x2F;about</span><br><span class="line">  # archives: &#x2F;archives</span><br></pre></td></tr></table></figure><p>&nbsp;</p><h4 id="创建页面"><a href="#创建页面" class="headerlink" title="创建页面"></a>创建页面</h4><p>  hexo中创建页面，需要手动在source文件夹下创建对应的目录和index.md文件。例如about页面：</p><p>  /source/about/index.md</p>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 关于俺</span><br><span class="line">date: 2016-05-24 13:45:13</span><br><span class="line">type: "about"</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>  配置说明：</p><blockquote><p>type: 页面类型，参考hexo文档</p><p>title: about页面的title标签，如果没有默认为About</p></blockquote><p>&nbsp;</p><h4 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h4><p>  搜索使用了插件hexo-generator-tag，必须先npm install</p><p>  在文章头部声明标签：</p>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: ES6/ES7参考手册</span><br><span class="line">date: 2016-12-23 16:08:28</span><br><span class="line">category:</span><br><span class="line"><span class="bullet">- </span>前端</span><br><span class="line">tags:</span><br><span class="line"><span class="bullet">- </span>es6</span><br><span class="line"><span class="bullet">- </span>手册</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>&nbsp;</p><h4 id="搜索页"><a href="#搜索页" class="headerlink" title="搜索页"></a>搜索页</h4><p>  搜索使用了插件<a href="https://github.com/PaicHyperionDev/hexo-generator-search" target="_blank" rel="noopener">hexo-generator-search</a> . 必须先npm install </p><p>  a、npm install hexo-generator-search –save</p><p>  b、在主目录<code>_config.yml</code>配置搜索选项</p>  <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br></pre></td></tr></table></figure><p>  c、参考创建页面创建search文件。</p><p>&nbsp;</p><h4 id="配置多语言（可选）"><a href="#配置多语言（可选）" class="headerlink" title="配置多语言（可选）"></a>配置多语言（可选）</h4><p>  menu配置中为<code>key:value</code> 格式，key支持多语言配置，翻译文件在languages文件夹下。</p><p>&nbsp;</p><h4 id="站点统计"><a href="#站点统计" class="headerlink" title="站点统计"></a>站点统计</h4><p>  支持百度统计和google统计，在主目录中配置</p>  <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">google_analytics:</span> <span class="string">UA-xxxx</span></span><br><span class="line"><span class="attr">baidu_analytics:</span> <span class="string">xxxx</span></span><br></pre></td></tr></table></figure><h3 id="部署在子目录"><a href="#部署在子目录" class="headerlink" title="部署在子目录"></a>部署在子目录</h3><p>如果你更希望你的站点部署在 &lt;你的 GitHub 用户名&gt;.github.io 的子目录中，<br>你的 repository 需要直接命名为子目录的名字，<br>这样你的站点可以通过 https://&lt;你的 GitHub 用户名&gt;.github.io/&lt;repository 的名字&gt; 访问。<br>你需要检查你的 Hexo 配置文件，将 url 修改为 https://&lt;你的 GitHub 用户名&gt;.github.io/&lt;repository 的名字&gt;、<br>将 root 的值修改为 /&lt;repository 的名字&gt;/</p><p>&nbsp;</p><h3 id="部署到仓库"><a href="#部署到仓库" class="headerlink" title="部署到仓库"></a>部署到仓库</h3><p>使用 hexo-deployer-git 部署到仓库</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>修改根目录下的 _config.yml,</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/&lt;username&gt;/&lt;project&gt;</span><br><span class="line">  # example, https://github.com/hexojs/hexojs.github.io</span><br><span class="line">  branch: gh-pages</span><br></pre></td></tr></table></figure><p>执行部署</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo deploy</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitBook使用概述</title>
      <link href="/2020/03/12/gitbook/GitBook%E4%BD%BF%E7%94%A8%E6%A6%82%E8%BF%B0/"/>
      <url>/2020/03/12/gitbook/GitBook%E4%BD%BF%E7%94%A8%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="GitBook使用概述"><a href="#GitBook使用概述" class="headerlink" title="GitBook使用概述"></a>GitBook使用概述</h2><p>参考文章</p><p><a href="https://snowdreams1006.github.io/myGitbook/experience/gitbook-cli.html#" target="_blank" rel="noopener">https://snowdreams1006.github.io/myGitbook</a><br><a href="https://einverne.github.io/gitbook-tutorial/" target="_blank" rel="noopener">https://einverne.github.io/gitbook-tutorial/</a></p><h2 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h2><p>GitBook 是一个基于 Node.js 的命令行工具，可使用 Github/Git 和 Markdown来制作精美的电子书，GitBook 并非关于 [Git]的教程。</p><blockquote><p>node 环境</p></blockquote><p>执行 gitbook init时， 发现报错如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Error loading version latest: Error: Cannot find module &#39;internal&#x2F;util&#x2F;types&#39;</span><br><span class="line">    at Function.Module._resolveFilename (module.js:538:15)</span><br><span class="line">    at Function.Module._load (module.js:468:25)</span><br><span class="line">    at Module.require (module.js:587:17)</span><br><span class="line">    at require (internal&#x2F;module.js:11:18)</span><br><span class="line">    at evalmachine.&lt;anonymous&gt;:31:26</span><br><span class="line">    at Object.&lt;anonymous&gt; (&#x2F;Users&#x2F;vspt&#x2F;.gitbook&#x2F;versions&#x2F;2.6.6&#x2F;node_modules&#x2F;graceful-fs&#x2F;fs.js:11:1)</span><br><span class="line">    at Module._compile (module.js:643:30)</span><br><span class="line">    at Object.Module._extensions..js (module.js:654:10)</span><br><span class="line">    at Module.load (module.js:556:32)</span><br><span class="line">    at tryModuleLoad (module.js:499:12)</span><br><span class="line"></span><br><span class="line">TypeError: Cannot read property &#39;commands&#39; of null</span><br></pre></td></tr></table></figure><p>问题原因 Gitbook 只支持 node 6.x.x版本，node版本不对，使用n或者nvm切换node版本重新安装 gitbook-cli</p><h2 id="二、安装gitbook-cli"><a href="#二、安装gitbook-cli" class="headerlink" title="二、安装gitbook-cli"></a>二、安装gitbook-cli</h2><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g gitbook-cli</span><br></pre></td></tr></table></figure><h2 id="三、初始化"><a href="#三、初始化" class="headerlink" title="三、初始化"></a>三、初始化</h2><p>新建gitbook-demo文件夹，初始化：</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitbook init</span><br></pre></td></tr></table></figure><h2 id="四、目录"><a href="#四、目录" class="headerlink" title="四、目录"></a>四、目录</h2><blockquote><p>README.md —— 书籍的介绍写在这个文件里<br>SUMMARY.md —— 书籍的目录结构在这里配置</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/3957667-8bb253a32f5cbbb2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="QQ20200115-161730.png"></p><h2 id="五、编辑SUMMARY-md"><a href="#五、编辑SUMMARY-md" class="headerlink" title="五、编辑SUMMARY.md"></a>五、编辑SUMMARY.md</h2><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 目录 SUMMARY.md</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>[<span class="string">前言</span>](<span class="link">README.md</span>)</span><br><span class="line"><span class="bullet">* </span>[<span class="string">第一章</span>](<span class="link">Chapter1/README.md</span>)</span><br><span class="line"><span class="bullet">  * </span>[<span class="string">第1节：1</span>](<span class="link">Chapter1/1.md</span>)</span><br><span class="line"><span class="bullet">  * </span>[<span class="string">第2节：2</span>](<span class="link">Chapter1/2.md</span>)</span><br><span class="line"><span class="bullet">  * </span>[<span class="string">第3节：3</span>](<span class="link">Chapter1/3.md</span>)</span><br><span class="line"><span class="bullet">  * </span>[<span class="string">第4节：4</span>](<span class="link">Chapter1/4.md</span>)</span><br><span class="line"><span class="bullet">* </span>[<span class="string">第二章</span>](<span class="link">Chapter2/README.md</span>)</span><br><span class="line"><span class="bullet">* </span>[<span class="string">第三章</span>](<span class="link">Chapter3/README.md</span>)</span><br><span class="line"><span class="bullet">* </span>[<span class="string">第四章</span>](<span class="link">Chapter4/README.md</span>)</span><br></pre></td></tr></table></figure><p>再次执行gitbook init，根据SUMMARY.md里的章节内容，创建新的文件夹和md文件。<br><img src="https://upload-images.jianshu.io/upload_images/3957667-88b666fc18dbe134.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="QQ20200115-162624.png"></p><h2 id="六、启动-gitbook-项目"><a href="#六、启动-gitbook-项目" class="headerlink" title="六、启动 gitbook 项目"></a>六、启动 gitbook 项目</h2><p>启动本地服务: gitbook serve</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitbook serve</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/3957667-628e4d3060c2cc9d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="QQ20200115-163829@2x.png"></p><p>程序无报错则可以在浏览器预览电子书效果: <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 。能够实时预览电子书效果。</p><h2 id="七、构建-gitbook-静态网页"><a href="#七、构建-gitbook-静态网页" class="headerlink" title="七、构建 gitbook 静态网页"></a>七、构建 gitbook 静态网页</h2><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitbook build</span><br></pre></td></tr></table></figure><p>构建静态网页而不启动本地服务器,默认生成文件存放在 _book/ 目录，输出静态网页后可打包上传到服务器，也可以上传到 github 等网站进行托管,因而主要用于发布准备阶段。</p><p>&nbsp;</p><h2 id="八、总结"><a href="#八、总结" class="headerlink" title="八、总结"></a>八、总结</h2> <figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">gitbook init   <span class="comment">##初始化 README.md 和 SUMMARY.md 两个文件. </span></span><br><span class="line">gitbook serve  <span class="comment">##本地构建并运行服务,默认访问 http://localhost:4000 实时预览。</span></span><br><span class="line"></span><br><span class="line">gitbook install  <span class="comment">##安装当前项目所需插件</span></span><br><span class="line">gitbook install [book] <span class="comment">##安装指定插件</span></span><br><span class="line"></span><br><span class="line">gitbook build  <span class="comment">##构建书籍：默认：将生成的静态网站输出到 _book 目录</span></span><br><span class="line">gitbook build  [书籍路径] [输出路径] <span class="comment">##指定路径</span></span><br><span class="line"></span><br><span class="line">gitbook serve --port 2333  <span class="comment">##指定端口</span></span><br><span class="line">gitbook pdf ./ ./mybook.pdf   <span class="comment">##生成pdf格式</span></span><br><span class="line">gitbook epub ./ ./mybook.epub <span class="comment">##生成epub格式</span></span><br><span class="line">gitbook mobi ./ ./mybook.mobi  <span class="comment">##生成mobi格式</span></span><br></pre></td></tr></table></figure><h2 id="九、部署到gitHub-pages"><a href="#九、部署到gitHub-pages" class="headerlink" title="九、部署到gitHub pages"></a>九、部署到gitHub pages</h2><p>执行 gitbook build 之后 默认将生成的静态网站输出到 _book 目录</p><p>新建一个仓库如gitbook-demo，并创建一个分支（分支名必须为gh-pages）。 </p><ol><li><p>可以直接将_book目录下的所有文件直接复制到分支gh-pages项目里，然后git提交到远程仓库。</p></li><li><p>使用 gh-pages。安装 npm install gh-pages -g。</p><p> gh-pages –help  查看帮助</p><p> 使用命令 </p> <figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gh-pages -d _book -r git@github.com:xxxxx/gitbook-demo.git</span><br></pre></td></tr></table></figure><p> 上面这条命令将_book下的所有文件提交到gitbook-demo仓库的gh-pages分支上。</p><p> 所以可以如下操作：</p> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">        <span class="attr">"build"</span>: <span class="string">"gitbook build"</span>,</span><br><span class="line">        <span class="attr">"serve"</span>: <span class="string">"gitbook serve"</span>,</span><br><span class="line">        <span class="attr">"deploy"</span>: <span class="string">"gitbook build  &amp;&amp; gh-pages -d _book -r git@github.com:xxxxx/gitbook-demo.git"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Gitbook </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gitbook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git的常用操作</title>
      <link href="/2020/03/10/git/git/"/>
      <url>/2020/03/10/git/git/</url>
      
        <content type="html"><![CDATA[<h3 id="Git-常用操作"><a href="#Git-常用操作" class="headerlink" title="Git 常用操作"></a>Git 常用操作</h3><h4 id="上传新项目到远程"><a href="#上传新项目到远程" class="headerlink" title="上传新项目到远程"></a>上传新项目到远程</h4><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -am <span class="string">"first-commit"</span></span><br><span class="line">git remote add origin git@github.com:xxxx/xxx.git</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><h4 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h4><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch -D XXX   //强制删除本地分支</span><br><span class="line">git push origin  :XXXX   //删除远程分支 需要切换到其它分支</span><br></pre></td></tr></table></figure><h4 id="Git-pull-强制覆盖本地文件"><a href="#Git-pull-强制覆盖本地文件" class="headerlink" title="Git pull 强制覆盖本地文件"></a>Git pull 强制覆盖本地文件</h4><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git fetch --all</span><br><span class="line">git reset --hard origin/master</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure><h4 id="Git-强制push本地代码到远端"><a href="#Git-强制push本地代码到远端" class="headerlink" title="Git 强制push本地代码到远端"></a>Git 强制push本地代码到远端</h4><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -f origin master</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
