<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Promise</title>
      <link href="/2020/06/01/es6/promise/"/>
      <url>/2020/06/01/es6/promise/</url>
      
        <content type="html"><![CDATA[<h3 id="1-Promise-的含义"><a href="#1-Promise-的含义" class="headerlink" title="1. Promise 的含义"></a>1. Promise 的含义</h3><p>所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。</p><ol><li><p>对象的状态不受外界影响。Promise对象代表一个异步操作。<br>有三种状态：pending（进行中）、fulfilled（已成功）和rejected（已失败）。<br>只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。<br>这也是Promise这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。</p></li><li><p>一旦状态改变，就不会再变，任何时候都可以得到这个结果。<br>Promise对象的状态改变，只有两种可能：<strong><em>从pending变为fulfilled和从pending变为rejected</em></strong>。<br>只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果，这时就称为 resolved（已定型）。如果改变已经发生了，你再对Promise对象添加回调函数，也会立即得到这个结果。这与事件（Event）完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。</p></li></ol><p>有了Promise对象，就可以将异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。</p><p>Promise也有一些缺点。<br>首先，无法取消Promise，一旦新建它就会立即执行，无法中途取消。<br>其次，如果不设置回调函数，Promise内部抛出的错误，不会反应到外部。<br>第三，当处于pending状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）。</p><h3 id="2-基本用法"><a href="#2-基本用法" class="headerlink" title="2. 基本用法"></a>2. 基本用法</h3><p>Promise对象是一个构造函数，用来生成Promise实例。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ... some code</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="comment">/* 异步操作成功 */</span>)&#123;</span><br><span class="line">    resolve(value);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    reject(error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Promise构造函数接受一个函数作为参数，该函数的两个参数分别是resolve和reject。它们是两个函数，由 JavaScript 引擎提供，不用自己部署。</p><p>resolve函数的作用是，将Promise对象的状态从“未完成”变为“成功”（即从 pending 变为 resolved），在异步操作成功时调用，并将异步操作的结果，作为参数传递出去；reject函数的作用是，将Promise对象的状态从“未完成”变为“失败”（即从 pending 变为 rejected），在异步操作失败时调用，并将异步操作报出的错误，作为参数传递出去。</p><p>Promise实例生成以后，可以用then方法分别指定resolved状态和rejected状态的回调函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">promise.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// resolved</span></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// rejected</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line">promise.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// resolved</span></span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// rejected</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="3-finally"><a href="#3-finally" class="headerlink" title="3. finally()"></a>3. finally()</h3><p>finally()方法用于指定不管 Promise 对象最后状态如何，都会执行的操作。该方法是 ES2018 引入标准的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">promise</span><br><span class="line">.then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;···&#125;)</span><br><span class="line">.catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;···&#125;)</span><br><span class="line">.finally(<span class="function"><span class="params">()</span> =&gt;</span> &#123;···&#125;);</span><br></pre></td></tr></table></figure><p>上面代码中，不管promise最后的状态，在执行完then或catch指定的回调函数以后，都会执行finally方法指定的回调函数。</p><h3 id="4-Promise-all"><a href="#4-Promise-all" class="headerlink" title="4. Promise.all()"></a>4. Promise.all()</h3><p>Promise.all()方法用于将多个 Promise 实例，包装成一个新的 Promise 实例。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="built_in">Promise</span>.all([p1, p2, p3]);</span><br></pre></td></tr></table></figure><p>另外，Promise.all()方法的参数可以不是数组，但必须具有 Iterator 接口，且返回的每个成员都是 Promise 实例。</p><p>p的状态由p1、p2、p3决定，分成两种情况。<br>（1）只有p1、p2、p3的状态都变成fulfilled，p的状态才会变成fulfilled，此时p1、p2、p3的返回值组成一个数组，传递给p的回调函数。<br>（2）只要p1、p2、p3之中有一个被rejected，p的状态就变成rejected，此时第一个被reject的实例的返回值，会传递给p的回调函数。</p><p>下面是一个具体的例子。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生成一个Promise对象的数组</span></span><br><span class="line"><span class="keyword">const</span> promises = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>].map(<span class="function"><span class="keyword">function</span> (<span class="params">id</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> getJSON(<span class="string">'/post/'</span> + id + <span class="string">".json"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.all(promises).then(<span class="function"><span class="keyword">function</span> (<span class="params">posts</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">reason</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>注意，如果作为参数的 Promise 实例，自己定义了catch方法，那么它一旦被rejected，并不会触发Promise.all()的catch方法。</p>]]></content>
      
      
      <categories>
          
          <category> es6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> es6 Promise </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决window.open被浏览器拦截的问题</title>
      <link href="/2020/03/24/other/%E6%A8%A1%E6%8B%9F%E8%B7%B3%E8%BD%AC/"/>
      <url>/2020/03/24/other/%E6%A8%A1%E6%8B%9F%E8%B7%B3%E8%BD%AC/</url>
      
        <content type="html"><![CDATA[<h3 id="模拟跳转"><a href="#模拟跳转" class="headerlink" title="模拟跳转"></a>模拟跳转</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">openurl</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//创建A标签</span></span><br><span class="line">  <span class="keyword">var</span> a = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>);</span><br><span class="line">  <span class="comment">//给创建好的a标签赋值</span></span><br><span class="line">  a.setAttribute(<span class="string">'href'</span>, url);</span><br><span class="line">  <span class="comment">//设置css 隐藏属性</span></span><br><span class="line">  a.setAttribute(<span class="string">'style'</span>, <span class="string">'display:none'</span>);  </span><br><span class="line">  <span class="comment">//设置 a标签为新窗口打开</span></span><br><span class="line">  a.setAttribute(<span class="string">'target'</span>, <span class="string">'_blank'</span>);  </span><br><span class="line">  <span class="comment">//将设置好的a标签，添加到 body 内</span></span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(a);</span><br><span class="line">  <span class="comment">//模拟点击</span></span><br><span class="line">  a.click();</span><br><span class="line">  <span class="comment">//移除a标签</span></span><br><span class="line">  a.parentNode.removeChild(a);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 模拟跳转 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> window.open() </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML img标签之onabort、onerror、onload事件与问题</title>
      <link href="/2020/03/20/other/img_onload_onerror_onabout/"/>
      <url>/2020/03/20/other/img_onload_onerror_onabout/</url>
      
        <content type="html"><![CDATA[<p>HTML img标签之onabort、onerror、onload事件与问题</p><ul><li><p>onerror：当图片加载出现错误，会触发。</p></li><li><p>onload：事件是当图片加载完成之后触发。</p></li><li><p>onabort：图片加载的时候，用户通过点击停止加载（浏览器上的红色叉叉）时触发。</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">    img.crossOrigin = <span class="string">"Anonymous"</span>;</span><br><span class="line">    img.onload = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">11</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    img.onerror = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">22</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    img.onabout = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">333</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    img.src = <span class="string">'https://upload-images.jianshu.io/upload_images/3957667-19369bd22e528e66.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp'</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">document</span>.body.append(img)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> img的事件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> email </tag>
            
            <tag> 邮箱 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript判断机器是否联网的2种方法</title>
      <link href="/2020/03/20/other/js%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E8%BF%9E%E7%BD%91/"/>
      <url>/2020/03/20/other/js%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E8%BF%9E%E7%BD%91/</url>
      
        <content type="html"><![CDATA[<h2 id="javascript判断机器是否联网的2种方法"><a href="#javascript判断机器是否联网的2种方法" class="headerlink" title="javascript判断机器是否联网的2种方法"></a>javascript判断机器是否联网的2种方法</h2><h3 id="1-navigator-onLine"><a href="#1-navigator-onLine" class="headerlink" title="1. navigator.onLine"></a>1. navigator.onLine</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (navigator.onLine) &#123; </span><br><span class="line">    <span class="comment">//正常工作</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123; </span><br><span class="line">    <span class="comment">//执行离线状态时的任务</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个html5的 navigator的新特性可以很简单帮我们搞定。</p><h3 id="2-online和offline"><a href="#2-online和offline" class="headerlink" title="2. online和offline"></a>2. online和offline</h3><p>当然，如果想支持的更兼容，可以使用如下2个事件：online和offline。当<br>网络从离线变为在线或者从在线变为离线时，分别触发这两个事件。 </p><p>为了检测应用是否离线，在页面加载后，最好先通过navigator.onLine取得初始的状态。然后，就是通过上述两个事件来确定网络连接状态是否变化。</p><p>当上述事件触发之后，navigator.onLine的值也会改变。 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> EventUtil = &#123; </span><br><span class="line">    addHandler: <span class="function"><span class="keyword">function</span> (<span class="params">element, type, handler</span>) </span>&#123; </span><br><span class="line">        <span class="keyword">if</span> (element.addEventListener) &#123; </span><br><span class="line">            element.addEventListener(type, handler, <span class="literal">false</span>); </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.attachEvent) &#123; </span><br><span class="line">            element.attachEvent(<span class="string">"on"</span> + type, handler); </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">            element[<span class="string">"on"</span> + type] = handler; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;; </span><br><span class="line">EventUtil.addHandler(<span class="built_in">window</span>, <span class="string">"online"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </span><br><span class="line">    alert(<span class="string">"Online"</span>); </span><br><span class="line">&#125;); </span><br><span class="line">EventUtil.addHandler(<span class="built_in">window</span>, <span class="string">"offline"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </span><br><span class="line">    alert(<span class="string">"Offline"</span>); </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 阻止选中 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 阻止选中 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阻止内容被选中</title>
      <link href="/2020/03/20/other/%E9%98%BB%E6%AD%A2%E5%86%85%E5%AE%B9%E8%A2%AB%E9%80%89%E4%B8%AD/"/>
      <url>/2020/03/20/other/%E9%98%BB%E6%AD%A2%E5%86%85%E5%AE%B9%E8%A2%AB%E9%80%89%E4%B8%AD/</url>
      
        <content type="html"><![CDATA[<h3 id="JS阻止文本被选中"><a href="#JS阻止文本被选中" class="headerlink" title="JS阻止文本被选中"></a>JS阻止文本被选中</h3><h4 id="阻止整个页面选中"><a href="#阻止整个页面选中" class="headerlink" title="阻止整个页面选中"></a>阻止整个页面选中</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.body.onselectstart=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">或者</span><br><span class="line"><span class="built_in">document</span>.body.onmousedown=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="阻止部分内容选中"><a href="#阻止部分内容选中" class="headerlink" title="阻止部分内容选中"></a>阻止部分内容选中</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> eId = <span class="built_in">document</span>.getElementById(<span class="string">'eId'</span>)</span><br><span class="line">eId.onselectstart=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="移动端"><a href="#移动端" class="headerlink" title="移动端"></a>移动端</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ontouchstart=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CSS-禁止文本被选中"><a href="#CSS-禁止文本被选中" class="headerlink" title="CSS-禁止文本被选中"></a>CSS-禁止文本被选中</h3><h4 id="pc端："><a href="#pc端：" class="headerlink" title="pc端："></a>pc端：</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.not-select</span>&#123;</span><br><span class="line">    <span class="attribute">-moz-user-select</span>:none; <span class="comment">/*火狐*/</span></span><br><span class="line">    <span class="attribute">-webkit-user-select</span>:none; <span class="comment">/*webkit浏览器*/</span></span><br><span class="line">    <span class="attribute">-ms-user-select</span>:none; <span class="comment">/*IE10*/</span></span><br><span class="line">    <span class="attribute">-khtml-user-select</span>:none; <span class="comment">/*早期浏览器*/</span></span><br><span class="line">    <span class="attribute">user-select</span>:none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="移动端："><a href="#移动端：" class="headerlink" title="移动端："></a>移动端：</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.no-touch</span> &#123;</span><br><span class="line">    <span class="attribute">-webkit-touch-callout</span>: none;</span><br><span class="line">    <span class="attribute">-webkit-user-select</span>: none;</span><br><span class="line">    <span class="attribute">-khtml-user-select</span>: none;</span><br><span class="line">    <span class="attribute">-moz-user-select</span>: none;</span><br><span class="line">    <span class="attribute">-ms-user-select</span>: none;</span><br><span class="line">    <span class="attribute">user-select</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 阻止选中 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 阻止选中 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mailto HTML email 链接</title>
      <link href="/2020/03/20/other/mailto_email/"/>
      <url>/2020/03/20/other/mailto_email/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是mailto链接"><a href="#什么是mailto链接" class="headerlink" title="什么是mailto链接"></a>什么是mailto链接</h3><p>mailto链接是一种html链接，能够设置你电脑中邮件的默认发送信息。但是需要你电脑中安装默认的E-mail软件，那么直接点击mailto链接就可以获得默认设置的邮件信息。</p><h3 id="怎样在html中创建mailto链接"><a href="#怎样在html中创建mailto链接" class="headerlink" title="怎样在html中创建mailto链接"></a>怎样在html中创建mailto链接</h3><p>mailto 链接一般是写在herf当中的。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"mailto:name@email.com"</span>&gt;</span>Email<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>参数如下：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>mailto:<a href="mailto:name@email.com">name@email.com</a></td><td>邮箱地址</td></tr><tr><td>cc=name@email.com</td><td>抄送邮箱地址</td></tr><tr><td>bcc=name@email.com</td><td>密送邮箱地址</td></tr><tr><td>subject=subject</td><td>邮件主题</td></tr><tr><td>body=body</td><td>邮件的内容</td></tr><tr><td>?</td><td>和浏览器地址操作一样，第一个参数符合是？</td></tr><tr><td>&amp;</td><td>其他参数符号是&amp;</td></tr></tbody></table><h4 id="仅有邮件的地址"><a href="#仅有邮件的地址" class="headerlink" title="仅有邮件的地址"></a>仅有邮件的地址</h4><p><a href="mailto:name1@126.com">给name1发送邮件</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"mailto:name1@126.com"</span>&gt;</span>给name1发送邮件<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&nbsp;</p><h4 id="带有邮件地址和主题"><a href="#带有邮件地址和主题" class="headerlink" title="带有邮件地址和主题"></a>带有邮件地址和主题</h4><p><a href="mailto:name1@126.com?subject=开会">给name1发送带主题的邮件</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"mailto:name1@126.com?subject=开会"</span>&gt;</span>给name1发送带主题的邮件<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&nbsp;</p><h4 id="全部参数的邮件"><a href="#全部参数的邮件" class="headerlink" title="全部参数的邮件"></a>全部参数的邮件</h4><p><a href="mailto:name1@126.com?cc=name2@126.com&bcc=name3@126.com&subject=开会&body=十点开会">发送全部参数的Email</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"mailto:name1@126.com?cc=name2@126.com&amp;bcc=name3@126.com&amp;subject=开会&amp;body=十点开会"</span>&gt;</span>发送全部参数的Email<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2020/03/20/other/mailto_email/1.png" alt="1.png"></p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>mailto题目和内容中如何增加空格<br>浏览器中%20是空格的意思</p>]]></content>
      
      
      <categories>
          
          <category> mailto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> email </tag>
            
            <tag> 邮箱 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vsCode的markdown环境配置</title>
      <link href="/2020/03/20/other/markdown/"/>
      <url>/2020/03/20/other/markdown/</url>
      
        <content type="html"><![CDATA[<h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>因为经常使用markdown写日志，又加上使用vsCode开发。<br>vsCode + markdown完美结合。</p><h3 id="效果截图"><a href="#效果截图" class="headerlink" title="效果截图"></a>效果截图</h3><p><img src="/2020/03/20/other/markdown/9.png" alt="9.png"></p><h3 id="markdown常用插件"><a href="#markdown常用插件" class="headerlink" title="markdown常用插件"></a>markdown常用插件</h3><p>在插件商店输入markdown搜索</p><h4 id="markdown-all-in-one"><a href="#markdown-all-in-one" class="headerlink" title="markdown all in one"></a>markdown all in one</h4><p><img src="/2020/03/20/other/markdown/1.png" alt="1.png"></p><h4 id="将原生markdown预览的黑色背景改为白色"><a href="#将原生markdown预览的黑色背景改为白色" class="headerlink" title="将原生markdown预览的黑色背景改为白色"></a>将原生markdown预览的黑色背景改为白色</h4><p><img src="/2020/03/20/other/markdown/2.png" alt="2.png"></p><h4 id="Github风格的预览"><a href="#Github风格的预览" class="headerlink" title="Github风格的预览"></a>Github风格的预览</h4><p><img src="/2020/03/20/other/markdown/3.png" alt="3.png"></p><h4 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h4><p><img src="/2020/03/20/other/markdown/4.png" alt="4.png"></p><h4 id="自动打开预览页面，原生markdown需要手动打开"><a href="#自动打开预览页面，原生markdown需要手动打开" class="headerlink" title="自动打开预览页面，原生markdown需要手动打开"></a>自动打开预览页面，原生markdown需要手动打开</h4><p><img src="/2020/03/20/other/markdown/5.png" alt="5.png"></p><h4 id="生成目录"><a href="#生成目录" class="headerlink" title="生成目录"></a>生成目录</h4><p><img src="/2020/03/20/other/markdown/6.png" alt="6.png"></p><h4 id="导出pdf"><a href="#导出pdf" class="headerlink" title="导出pdf"></a>导出pdf</h4><p>Markdown to PDF<br><img src="/2020/03/20/other/markdown/8.png" alt="8.png"></p>]]></content>
      
      
      <categories>
          
          <category> markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim的使用</title>
      <link href="/2020/03/20/other/vim/"/>
      <url>/2020/03/20/other/vim/</url>
      
        <content type="html"><![CDATA[<p>Vim是从 vi 发展出来的一个文本编辑器。<br>vim 键盘图：<br><img src="/2020/03/20/other/vim/1.gif" alt="1.gif"></p><h3 id="vim-的使用"><a href="#vim-的使用" class="headerlink" title="vim 的使用"></a>vim 的使用</h3><p>基本上 vim 共分为三种模式，</p><ul><li>命令模式（Command mode）</li><li>输入模式（Insert mode）</li><li>底线命令模式（Last line mode）</li></ul><h4 id="命令模式："><a href="#命令模式：" class="headerlink" title="命令模式："></a>命令模式：</h4><p>用户刚刚启动 vi/vim，便进入了命令模式。<br>此状态下敲击键盘动作会被Vim识别为命令，而非输入字符。比如我们此时按下i，并不会输入一个字符，i被当作了一个命令。</p><p>以下是常用的几个命令：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">i  切换到输入模式，以输入字符。</span><br><span class="line"><span class="keyword">x</span>  删除当前光标所在处的字符。</span><br><span class="line">:  切换到底线命令模式，以在最底一行输入命令。</span><br></pre></td></tr></table></figure><p>若想要编辑文本：启动Vim，进入了命令模式，按下i，切换到输入模式。<br>命令模式只有一些最基本的命令，因此仍要依靠底线命令模式输入更多命令。</p><h4 id="输入模式"><a href="#输入模式" class="headerlink" title="输入模式"></a>输入模式</h4><p>在命令模式下按下i就进入了输入模式。<br>在输入模式中，可以使用以下按键：</p><ul><li>字符按键以及Shift组合，输入字符</li><li>ENTER，回车键，换行</li><li>BACK SPACE，退格键，删除光标前一个字符</li><li>DEL，删除键，删除光标后一个字符</li><li>方向键，在文本中移动光标</li><li>HOME/END，移动光标到行首/行尾</li><li>Page Up/Page Down，上/下翻页</li><li>Insert，切换光标为输入/替换模式，光标将变成竖线/下划线</li><li>ESC，退出输入模式，切换到命令模式</li></ul><h4 id="底线命令模式"><a href="#底线命令模式" class="headerlink" title="底线命令模式"></a>底线命令模式</h4><p>在命令模式下按下:（英文冒号）就进入了底线命令模式。<br>底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。<br>在底线命令模式中，基本的命令有:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">:<span class="keyword">wq</span> 保存文件并退出<span class="keyword">vi</span></span><br><span class="line">:<span class="keyword">w</span> 保存文件但不退出<span class="keyword">vi</span></span><br><span class="line">:<span class="keyword">w</span> <span class="keyword">file</span> 将修改另外保存到<span class="keyword">file</span>中，不退出<span class="keyword">vi</span></span><br><span class="line">:q 不保存文件，退出<span class="keyword">vi</span></span><br></pre></td></tr></table></figure><p>按ESC键可随时退出底线命令模式。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>简单的说，我们可以将这三个模式想成底下的图标来表示：<br><img src="/2020/03/20/other/vim/2.png" alt="2.png"></p>]]></content>
      
      
      <categories>
          
          <category> vim </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 nvm 管理不同版本的 node 与 npm</title>
      <link href="/2020/03/20/other/nvm/"/>
      <url>/2020/03/20/other/nvm/</url>
      
        <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>nvm 是 Mac 下的 node 管理工具。<br>由于node版本很多，各个版本的特性不太一样，有时需要安装多个node版本。</p><h3 id="一、卸载已安装到全局的-node-npm"><a href="#一、卸载已安装到全局的-node-npm" class="headerlink" title="一、卸载已安装到全局的 node/npm"></a>一、卸载已安装到全局的 node/npm</h3><p>如果之前是在官网下载的 node 安装包，运行后会自动安装在全局目录，其中node 命令在<code>/usr/local/bin/node</code>。<br>npm 命令在全局 node_modules 目录中，具体路径为<code>/usr/local/lib/node_modules/npm</code>。<br>安装 nvm 之后最好先删除下已安装的 node 和全局 node 模块。</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm ls -g --depth=0 <span class="comment">#查看已经安装在全局的模块，以便删除这些全局模块后再按照不同的 node 版本重新进行全局安装。</span></span><br></pre></td></tr></table></figure><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -rf /usr/<span class="built_in">local</span>/lib/node_modules <span class="comment">#删除全局 node_modules 目录</span></span><br><span class="line">sudo rm /usr/<span class="built_in">local</span>/bin/node <span class="comment">#删除 node</span></span><br><span class="line"><span class="built_in">cd</span>  /usr/<span class="built_in">local</span>/bin &amp;&amp; ls -l | grep <span class="string">"../lib/node_modules/"</span> | awk <span class="string">'&#123;print $9&#125;'</span>| xargs rm <span class="comment">#删除全局 node 模块注册的软链</span></span><br></pre></td></tr></table></figure><h3 id="二、安装-nvm"><a href="#二、安装-nvm" class="headerlink" title="二、安装 nvm"></a>二、安装 nvm</h3><p>Mac 下通过 <code>brew install nvm</code> 所安装的nvm，由于安装路径不同，无法正确启用。<br>建议使用 brew uninstall nvm 卸载掉之后，通过本文的方案重新安装一次。</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.29.0/install.sh | bash</span><br></pre></td></tr></table></figure><p>安装完成后请重新打开终端环境，Mac 下推荐使用 oh-my-zsh 代替默认的 bash shell。</p><h3 id="三、安装切换各版本-node-npm"><a href="#三、安装切换各版本-node-npm" class="headerlink" title="三、安装切换各版本 node/npm"></a>三、安装切换各版本 node/npm</h3><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nvm install stable  <span class="comment">#安装最新稳定版 node，</span></span><br><span class="line">nvm install 4.2.2  <span class="comment">#安装 4.2.2 版本</span></span><br><span class="line">nvm install 0.12.7  <span class="comment">#安装 0.12.7 版本</span></span><br></pre></td></tr></table></figure><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nvm use 0  <span class="comment">#切换至 0.12.7 版本</span></span><br><span class="line">nvm use 4  <span class="comment">#切换至 4.2.2 版本</span></span><br><span class="line">nvm <span class="built_in">alias</span> default 0.12.7 <span class="comment">#设置默认 node 版本为 0.12.7</span></span><br></pre></td></tr></table></figure><h3 id="四、使用-nvmrc-文件配置项目所使用的-node-版本"><a href="#四、使用-nvmrc-文件配置项目所使用的-node-版本" class="headerlink" title="四、使用 .nvmrc 文件配置项目所使用的 node 版本"></a>四、使用 .nvmrc 文件配置项目所使用的 node 版本</h3><p>如果你的默认 node 版本（通过 nvm alias 命令设置的）与项目所需的版本不同，则可在项目根目录或其任意父级目录中创建 .nvmrc 文件，在文件中指定使用的 node 版本号，例如：</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> &lt;项目根目录&gt;  <span class="comment">#进入项目根目录</span></span><br><span class="line"><span class="built_in">echo</span> 4 &gt; .nvmrc <span class="comment">#添加 .nvmrc 文件</span></span><br><span class="line">nvm use <span class="comment">#无需指定版本号，会自动使用 .nvmrc 文件中配置的版本</span></span><br><span class="line">node -v <span class="comment">#查看 node 是否切换为对应版本</span></span><br></pre></td></tr></table></figure><h3 id="五、nvm-与-n-的区别"><a href="#五、nvm-与-n-的区别" class="headerlink" title="五、nvm 与 n 的区别"></a>五、nvm 与 n 的区别</h3><ul><li>node版本管理工具还有一个是 n 命令，n 命令是作为一个 node 的模块而存在。</li><li>nvm是一个独立于 node/npm 的外部 shell 脚本，因此 n 命令相比 nvm 更加局限。</li></ul><p>由于npm安装的模块路径均为<code>/usr/local/lib/node_modules</code>，<strong><em>当使用n切换不同的node版本时，实际上会共用全局的node/npm目录</em></strong>。</p><p>因此不能很好的满足<strong><em>不同 node 版本使用不同全局 npm 模块</em></strong>的需求。所有node版本公用一个npm，在使用npm安装模块时，很容易出现各种问题。所以建议使用 nvm。</p>]]></content>
      
      
      <categories>
          
          <category> nvm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>forever概述及使用</title>
      <link href="/2020/03/20/other/forever/"/>
      <url>/2020/03/20/other/forever/</url>
      
        <content type="html"><![CDATA[<h3 id="何为forever"><a href="#何为forever" class="headerlink" title="何为forever"></a>何为forever</h3><p>forever可以看做是一个nodejs的守护进程，能够启动，停止，重启我们的app应用。</p><h3 id="forever用途"><a href="#forever用途" class="headerlink" title="forever用途"></a>forever用途</h3><p>forever的用途就是帮我们更好的管理我们node App服务，本质上就是在forever进程之下，创建一个node app的子进程。</p><h3 id="安装forever"><a href="#安装forever" class="headerlink" title="安装forever"></a>安装forever</h3><p>记得加-g，forever要求安装到全局环境下</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install forever -g</span><br></pre></td></tr></table></figure><h3 id="forever常用命令"><a href="#forever常用命令" class="headerlink" title="forever常用命令"></a>forever常用命令</h3><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 简单的启动</span></span><br><span class="line">forever start app.js</span><br><span class="line"><span class="comment"># 2. 指定forever信息输出文件，当然，默认它会放到~/.forever/forever.log</span></span><br><span class="line">forever start -l forever.log app.js</span><br><span class="line"><span class="comment"># 3. 指定app.js中的日志信息和错误日志输出文件，-o 就是console.log输出的信息，-e 就是console.error输出的信息</span></span><br><span class="line">forever start -o out.log -e err.log app.js</span><br><span class="line"><span class="comment"># 4. 追加日志，forever默认是不能覆盖上次的启动日志，所以如果第二次启动不加-a，则会不让运行</span></span><br><span class="line">forever start -l forever.log -a app.js</span><br><span class="line"><span class="comment"># 5. 监听当前文件夹下的所有文件改动</span></span><br><span class="line">forever start -w app.js</span><br></pre></td></tr></table></figure><h3 id="文件改动监听并自动重启"><a href="#文件改动监听并自动重启" class="headerlink" title="文件改动监听并自动重启"></a>文件改动监听并自动重启</h3><p>监听当前文件夹下的所有文件改动（不太建议这样）</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">forever start -w app.js</span><br></pre></td></tr></table></figure><h3 id="显示所有运行的服务"><a href="#显示所有运行的服务" class="headerlink" title="显示所有运行的服务"></a>显示所有运行的服务</h3><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">forever list</span><br></pre></td></tr></table></figure><h3 id="停止操作"><a href="#停止操作" class="headerlink" title="停止操作"></a>停止操作</h3><p> 停止所有运行的node App</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">forever stopall</span><br></pre></td></tr></table></figure><p>停止其中一个node App</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">forever stop app.js</span><br></pre></td></tr></table></figure><p>当然还可以这样，forever list 找到对应的id，然后：</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">forever stop [id]</span><br></pre></td></tr></table></figure><h3 id="重启操作"><a href="#重启操作" class="headerlink" title="重启操作"></a>重启操作</h3><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 启动所有</span></span><br><span class="line">forever restartall</span><br><span class="line"><span class="comment"># 2. 启动其中一个</span></span><br><span class="line">forever restart [id]</span><br></pre></td></tr></table></figure><h3 id="开发和线上建议配置"><a href="#开发和线上建议配置" class="headerlink" title="开发和线上建议配置"></a>开发和线上建议配置</h3><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开发环境下</span></span><br><span class="line">NODE_ENV=development forever start -l forever.log -e err.log -a app.js</span><br><span class="line"><span class="comment"># 线上环境下</span></span><br><span class="line">NODE_ENV=production forever start -l ~/.forever/forever.log -e ~/.forever/err.log -w -a app.js</span><br></pre></td></tr></table></figure><p>上面加上NODE_ENV为了让app.js辨认当前是什么环境用的。</p>]]></content>
      
      
      <categories>
          
          <category> forever </category>
          
      </categories>
      
      
        <tags>
            
            <tag> forever </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Performance — 前端性能监控利器</title>
      <link href="/2020/03/19/other/Performance/"/>
      <url>/2020/03/19/other/Performance/</url>
      
        <content type="html"><![CDATA[<h3 id><a href="#" class="headerlink" title></a></h3><p><strong><a href="https://www.cnblogs.com/wang-z-z/p/9485887.html" target="_blank" rel="noopener">网络原文</a></strong></p><p>首屏渲染时间获取 performance.now()</p><p>Performance是一个做前端性能监控离不开的API，最好在页面完全加载完成之后再使用，因为很多值必须在页面完全加载之后才能得到。<br>最简单的办法是在window.onload事件中读取各种数据。</p><p>目前主流浏览器虽然都已支持Performance对象，但是并不能支持它上面的全部属性和方法，<br>chrome浏览器都是兼容的，其他浏览器如下：<br>1.safari浏览器(包括mac和ios)只支持navigation,timing,now其余均不支持<br>2.微信浏览器支持timing,navigation属性，不支持performance.getEntries方法</p>]]></content>
      
      
      <categories>
          
          <category> Performance </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Performance </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>window.print简单使用</title>
      <link href="/2020/03/19/other/window.print/"/>
      <url>/2020/03/19/other/window.print/</url>
      
        <content type="html"><![CDATA[<h3 id="window-print"><a href="#window-print" class="headerlink" title="window.print()"></a>window.print()</h3><p>方法用于打印当前窗口的内容。<br>window.print()  实际上，是浏览器打印功能菜单的一种程序调用。与点击打印功能菜单一样，<br>但是这种方式最致命的缺点是不能设置打印参数，比如纸型，页边距，选择打印机等等。</p><h4 id="一：打印前和打印后的事件onbeforeprint、onafterprint"><a href="#一：打印前和打印后的事件onbeforeprint、onafterprint" class="headerlink" title="一：打印前和打印后的事件onbeforeprint、onafterprint"></a>一：打印前和打印后的事件onbeforeprint、onafterprint</h4><p>打印前和打印后的事件onbeforeprint、onafterprint。可以在打印前的时候重新编辑一些格式，专门送去打印，打印后又处理回来。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">window</span>.<span class="title">onbeforeprint</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">   <span class="comment">//将一些不需要打印的隐藏  </span></span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">window</span>.<span class="title">onafterprint</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">   <span class="comment">//放开隐藏的元素  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过这两个方法，就可以实现页面的部分打印。上述方法只有火狐和ie支持。</p><h4 id="二：利用media控制css"><a href="#二：利用media控制css" class="headerlink" title="二：利用media控制css"></a>二：利用media控制css</h4><p>调用window.print()时，可以利用css来控制页面中的东西是否显示。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span>  </span><br><span class="line"><span class="css"><span class="keyword">@media</span> print&#123;  </span></span><br><span class="line"><span class="css">　　<span class="selector-class">.noprint</span>&#123;  </span></span><br><span class="line"><span class="css">   　　<span class="selector-tag">display</span><span class="selector-pseudo">:none</span>  </span></span><br><span class="line">　　&#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span>  </span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">"757"</span> <span class="attr">height</span>=<span class="string">"174"</span> <span class="attr">border</span>=<span class="string">"0"</span> <span class="attr">align</span>=<span class="string">"center"</span> <span class="attr">cellpadding</span>=<span class="string">"0"</span> <span class="attr">cellspacing</span>=<span class="string">"0"</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">"noprint"</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span> <span class="attr">height</span>=<span class="string">"133"</span> <span class="attr">align</span>=<span class="string">"center"</span> <span class="attr">valign</span>=<span class="string">"top"</span>&gt;</span>  </span><br><span class="line">   <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"Images/top.jpg"</span> <span class="attr">width</span>=<span class="string">"757"</span> <span class="attr">height</span>=<span class="string">"133"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;/<span class="name">tr</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="三、把需要打印的内容显示到新窗口中"><a href="#三、把需要打印的内容显示到新窗口中" class="headerlink" title="三、把需要打印的内容显示到新窗口中"></a>三、把需要打印的内容显示到新窗口中</h4><p>在新窗口中调用window.print()方法，然后自动关闭新窗口。如果要打印的页面排版和原web页面相差很大，采用此种方法。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge,chrome=1"</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>打印测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">""</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"keywords"</span> <span class="attr">content</span>=<span class="string">""</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span>  </span><br><span class="line"><span class="css">    <span class="selector-id">#content</span> <span class="selector-tag">div</span>&#123;<span class="attribute">width</span>: <span class="number">100px</span>;<span class="attribute">height</span>: <span class="number">100px</span>;<span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#c50000</span>;&#125;  </span></span><br><span class="line"><span class="css">    <span class="keyword">@page</span> &#123; <span class="attribute">margin</span>: <span class="number">0</span>; &#125;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'content'</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span>bbb<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>ccc<span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"打印"</span> <span class="attr">id</span>=<span class="string">"print"</span> /&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span>  </span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> print = <span class="built_in">document</span>.getElementById(<span class="string">"print"</span>);  </span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> printData = <span class="built_in">document</span>.getElementById(<span class="string">"content"</span>).innerHTML;</span></span><br><span class="line"><span class="actionscript">    print.onclick=<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;  </span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> oPop = <span class="built_in">window</span>.open(<span class="string">''</span>,<span class="string">'oPop'</span>);  </span></span><br><span class="line"><span class="handlebars"><span class="xml">        var headstr = `<span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">'utf-8'</span>&gt;</span><span class="tag">&lt;<span class="name">html</span>&gt;</span><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="tag">&lt;<span class="name">style</span>&gt;</span>  </span></span></span><br><span class="line">                @page &#123;</span><br><span class="line">                  size: auto;</span><br><span class="line">                  margin: 0mm;</span><br><span class="line">                &#125;</span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">style</span>&gt;</span> <span class="tag">&lt;/<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">body</span>&gt;</span>`; </span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> footstr = <span class="string">"&lt;/body&gt;&lt;/html&gt;"</span>;  </span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> str = headstr+printData+footstr;  </span></span><br><span class="line">        oPop.document.write(str);  </span><br><span class="line">        oPop.print();  </span><br><span class="line">        oPop.close();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>去掉页眉页脚</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@page</span> &#123; <span class="attribute">margin</span>: <span class="number">0</span>; &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> print() </category>
          
      </categories>
      
      
        <tags>
            
            <tag> print() </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js实现复制文本内容到剪切板</title>
      <link href="/2020/03/19/other/js%E5%AE%9E%E7%8E%B0%E5%A4%8D%E5%88%B6%E5%86%85%E5%AE%B9%E5%88%B0%E5%89%AA%E5%88%87%E6%9D%BF/"/>
      <url>/2020/03/19/other/js%E5%AE%9E%E7%8E%B0%E5%A4%8D%E5%88%B6%E5%86%85%E5%AE%B9%E5%88%B0%E5%89%AA%E5%88%87%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<h3 id="js实现复制文本内容到剪切板"><a href="#js实现复制文本内容到剪切板" class="headerlink" title="js实现复制文本内容到剪切板"></a>js实现复制文本内容到剪切板</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span>这是一段内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">   <span class="function"><span class="keyword">function</span> <span class="title">copyContent</span><span class="params">()</span></span></span></span><br><span class="line">    &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> Url2=<span class="built_in">document</span>.getElementById(<span class="string">"content"</span>).innerText;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> oInput = <span class="built_in">document</span>.createElement(<span class="string">'input'</span>);</span></span><br><span class="line">        oInput.value = Url2;</span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.body.appendChild(oInput);</span></span><br><span class="line"><span class="actionscript">        oInput.select(); <span class="comment">// 选择对象</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.execCommand(<span class="string">"Copy"</span>); <span class="comment">// 执行浏览器复制命令</span></span></span><br><span class="line"><span class="actionscript">        oInput.className = <span class="string">'oInput'</span>;</span></span><br><span class="line"><span class="actionscript">        oInput.style.display=<span class="string">'none'</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="坑："><a href="#坑：" class="headerlink" title="坑："></a>坑：</h3><ol><li>input框不能有disabled属性</li><li>input的width || height 不能为0；</li><li>input框不能有hidden属性</li></ol>]]></content>
      
      
      <categories>
          
          <category> 剪切板 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 复制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>获取当前日期0点及23点59的时间戳</title>
      <link href="/2020/03/19/other/0%E7%82%B9%E5%92%8C23%E7%82%B9/"/>
      <url>/2020/03/19/other/0%E7%82%B9%E5%92%8C23%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h3 id="获取今天0点时间戳"><a href="#获取今天0点时间戳" class="headerlink" title="获取今天0点时间戳"></a>获取今天0点时间戳</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> start = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="keyword">new</span> <span class="built_in">Date</span>().toLocaleDateString()).getTime());       </span><br><span class="line"><span class="comment">//如果不是当天换成你想获取0点的时间即可。</span></span><br><span class="line"><span class="built_in">console</span>.log(start);</span><br></pre></td></tr></table></figure><h3 id="获取今天23-59-59点时间戳"><a href="#获取今天23-59-59点时间戳" class="headerlink" title="获取今天23:59:59点时间戳"></a>获取今天23:59:59点时间戳</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> start = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="keyword">new</span> <span class="built_in">Date</span>().toLocaleDateString()).getTime()+<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>*<span class="number">1000</span><span class="number">-1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(start);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 时间 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 零点 </tag>
            
            <tag> 23点59 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac和Windows设置环境变量</title>
      <link href="/2020/03/19/other/Mac%E5%92%8CWindows%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/"/>
      <url>/2020/03/19/other/Mac%E5%92%8CWindows%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<p>Mac和Windows环境变量在package.json中的设置不太一样。</p><h3 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"dev"</span>: <span class="string">"PORT=3060 NODE_ENV=test nodemon --watch server/routes ./server/bin/www"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><p>&amp;前不要加空格</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"dev"</span>: <span class="string">"set PORT=3060&amp; set NODE_ENV=testa&amp;&amp;  nodemon --watch server/routes ./server/bin/www"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 环境变量 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境变量 </tag>
            
            <tag> Mac </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows和Mac端口占用</title>
      <link href="/2020/03/19/other/%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8/"/>
      <url>/2020/03/19/other/%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="Windows查看端口占用"><a href="#Windows查看端口占用" class="headerlink" title="Windows查看端口占用"></a>Windows查看端口占用</h3><h4 id="一、查看所有进程占用的端口"><a href="#一、查看所有进程占用的端口" class="headerlink" title="一、查看所有进程占用的端口"></a>一、查看所有进程占用的端口</h4><p>在开始-运行-cmd,输入：</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat –ano  //可以查看所有进程</span><br></pre></td></tr></table></figure><h4 id="二、查看占用指定端口的程序"><a href="#二、查看占用指定端口的程序" class="headerlink" title="二、查看占用指定端口的程序"></a>二、查看占用指定端口的程序</h4><p>经常会遇到端口被占用的情况，我们想知道是哪个程序或进程占用了端口，<br>可以用该命令 <code>netstat –ano|findstr [指定端口号]</code><br>如：查询占用了8080端口的进程：</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -ano|findstr <span class="string">"8080"</span></span><br></pre></td></tr></table></figure><h4 id="三、通过任务管理器杀死相关的进程"><a href="#三、通过任务管理器杀死相关的进程" class="headerlink" title="三、通过任务管理器杀死相关的进程"></a>三、通过任务管理器杀死相关的进程</h4><ol><li><p>使用任务管理器杀死进程<br>打开任务管理器-&gt;查看-&gt;选择列-&gt;然后勾选PID选项，回到任务管理器上可以查看到对应的pid，然后结束进程<br>当然上面的方法有时候不好用，就是任务管理器中的进程比较多的时候，然后去找到对应的进程是很麻烦的，所以还有一种方法可以杀死进程的</p></li><li><p>使用命令杀死进程<br>首先找到进程号对应的进程名称: <code>tasklist|findstr [进程号]</code>。</p> <figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tasklist|findstr 3112</span><br></pre></td></tr></table></figure><p> 然后根据进程名称杀死进程: <code>taskkill /f /t /im [进程名称]</code>。</p> <figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">taskkill /f /t /im /javaw.exe</span><br></pre></td></tr></table></figure></li></ol><h3 id="Mac端口占用"><a href="#Mac端口占用" class="headerlink" title="Mac端口占用"></a>Mac端口占用</h3><p>终端命令</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo lsof -i :9000</span><br></pre></td></tr></table></figure><p>会显示出PID: 716</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">COMMAND   PID    USER   FD      TYPE             DEVICE                      SIZE/OFF      NODE       NAME</span><br><span class="line">Java      716     a     313u   IPv6              0x1111111111111             0t0          TCP        *:cslistener (LISTEN)</span><br></pre></td></tr></table></figure><p>然后根据PID杀进程：</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">kill</span> -9 716</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 端口 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows端口占用 </tag>
            
            <tag> Mac端口占用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ajax请求HTTPS报错</title>
      <link href="/2020/03/19/https/ajax%E8%AF%B7%E6%B1%82HTTPS%E6%8A%A5%E9%94%99/"/>
      <url>/2020/03/19/https/ajax%E8%AF%B7%E6%B1%82HTTPS%E6%8A%A5%E9%94%99/</url>
      
        <content type="html"><![CDATA[<p>在使用ajax请求https接口过程中<br>在浏览器中报错：<br><strong><em>Failed to load resource: net::ERR_CERT_AUTHORITY_INVALID</em></strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(<span class="string">'https://xxxxx'</span>, &#123;</span><br><span class="line">    data: &#123;&#125;,</span><br><span class="line">    dataType: <span class="string">'json'</span>, <span class="comment">//服务器返回json格式数据</span></span><br><span class="line">    type: <span class="string">'post'</span>, <span class="comment">//HTTP请求类型</span></span><br><span class="line">    timeout: <span class="number">10000</span>, <span class="comment">//超时时间设置为10秒；</span></span><br><span class="line">    headers: &#123;</span><br><span class="line">        <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;,  </span><br><span class="line">    error: <span class="function"><span class="keyword">function</span> (<span class="params">xhr, type, errorThrown</span>) </span>&#123;  </span><br><span class="line"></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>具体原因是接口服务器端设置了ssl证书，是自己生成的不安全的证书。<br>需要在浏览器地址栏访问一下这个接口地址，加入到安全例外就可以了。</p>]]></content>
      
      
      <categories>
          
          <category> HTTPS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTPS </tag>
            
            <tag> 浏览器安全例外 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PhantomJS无法获取https网址的内容</title>
      <link href="/2020/03/19/https/PhantomJS/"/>
      <url>/2020/03/19/https/PhantomJS/</url>
      
        <content type="html"><![CDATA[<p>在使用PhantomJS的js执行环境，引入的https文件，加载报错。</p><p>具体原因是因为ssl安全不过关，需要设置phantomArgs，忽略ssl证书。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"phantomArgs"</span>: [<span class="string">"--ignore-ssl-errors=yes"</span>],</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> phantomPath = req.app.get(<span class="string">"phantom_home"</span>);</span><br><span class="line"><span class="keyword">let</span> options = &#123;</span><br><span class="line">    <span class="string">"phantomPath"</span>:phantomPath,</span><br><span class="line">    <span class="string">"phantomArgs"</span>: [<span class="string">"--ignore-ssl-errors=yes"</span>],</span><br><span class="line">    <span class="string">"format"</span>:<span class="string">"A4"</span>,</span><br><span class="line">    <span class="string">"orientation"</span>:<span class="string">"landscape"</span>,</span><br><span class="line">    <span class="string">"width"</span>:<span class="string">"793"</span>,</span><br><span class="line">    <span class="string">"height"</span>:pageHeight,</span><br><span class="line">    border: &#123;</span><br><span class="line">        top: <span class="string">'16mm'</span>,</span><br><span class="line">        left: <span class="number">0</span>,</span><br><span class="line">        right: <span class="number">0</span>,</span><br><span class="line">        bottom: <span class="string">'16mm'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> HTTPS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTPS </tag>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node请求HTTPS报错</title>
      <link href="/2020/03/19/https/node%E8%AF%B7%E6%B1%82HTTPS%E6%8A%A5%E9%94%99/"/>
      <url>/2020/03/19/https/node%E8%AF%B7%E6%B1%82HTTPS%E6%8A%A5%E9%94%99/</url>
      
        <content type="html"><![CDATA[<p>nodejs请求HTTPS报错：<strong><em>UNABLE_TO_VERIFY_LEAF_SIGNATURE</em></strong>的解<br>出现这个错误是因为对方网站的证书不正确导致的。<br>在请求的时候指定忽略证书验证，即<strong><em>options</em></strong>的<strong><em>rejectUnauthorized</em></strong>参数设置为false</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> https = <span class="built_in">require</span>(<span class="string">'https'</span>); </span><br><span class="line"><span class="keyword">var</span> options = &#123;</span><br><span class="line">    protocol: <span class="string">"https:"</span>,</span><br><span class="line">    hostname: _baseURL[<span class="number">0</span>],</span><br><span class="line">    port: <span class="number">443</span>,,</span><br><span class="line">    path: url,</span><br><span class="line">    method: <span class="string">'post'</span>,</span><br><span class="line">    rejectUnauthorized: process.NODE_ENV==<span class="string">"online"</span>,</span><br><span class="line">    headers: &#123;</span><br><span class="line">        <span class="string">'User-Agent'</span>: req.headers[<span class="string">'user-agent'</span>],</span><br><span class="line">        <span class="string">'Content-Type'</span>:<span class="string">'application/json'</span>,</span><br><span class="line">        <span class="string">'Cookie'</span>:req.headers.cookie||<span class="string">''</span>,</span><br><span class="line">        <span class="string">"TraceID"</span>:req.headers.traceid||<span class="string">''</span>,</span><br><span class="line">        <span class="string">"x-ht-real-ip"</span>:req.headers[<span class="string">"x-real-ip"</span>]||<span class="string">''</span>,</span><br><span class="line">        <span class="string">"EagleEye-SessionID"</span>:req.headers[<span class="string">"EagleEye-SessionID"</span>]||<span class="string">''</span>,</span><br><span class="line">        <span class="string">"EagleEye-TraceID"</span>:req.headers[<span class="string">"EagleEye-TraceID"</span>]||<span class="string">''</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> req = https.request(options, <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123; </span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"statusCode: "</span>, res.statusCode); </span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"headers: "</span>, res.headers); </span><br><span class="line"></span><br><span class="line">  res.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123; </span><br><span class="line">    process.stdout.write(d); </span><br><span class="line">  &#125;); </span><br><span class="line">&#125;); </span><br><span class="line">req.end(); </span><br><span class="line"></span><br><span class="line">req.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123; </span><br><span class="line">  <span class="built_in">console</span>.error(e); </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> HTTPS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTPS </tag>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>koa生成器</title>
      <link href="/2020/03/19/koa/koa%E7%94%9F%E6%88%90%E5%99%A8/"/>
      <url>/2020/03/19/koa/koa%E7%94%9F%E6%88%90%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="一-安装"><a href="#一-安装" class="headerlink" title="一.安装"></a>一.安装</h3><p>全局安装(支持koa1.2和koa2)</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install koa-generator -g</span><br></pre></td></tr></table></figure><h4 id="koa1生成test项目并下载依赖"><a href="#koa1生成test项目并下载依赖" class="headerlink" title="koa1生成test项目并下载依赖"></a>koa1生成test项目并下载依赖</h4><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">koa <span class="built_in">test</span></span><br><span class="line"><span class="built_in">cd</span> <span class="built_in">test</span></span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><h4 id="koa2生成test项目并下载依赖"><a href="#koa2生成test项目并下载依赖" class="headerlink" title="koa2生成test项目并下载依赖"></a>koa2生成test项目并下载依赖</h4><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">koa2 <span class="built_in">test</span></span><br><span class="line"><span class="built_in">cd</span> <span class="built_in">test</span></span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><h3 id="二-运行"><a href="#二-运行" class="headerlink" title="二.运行"></a>二.运行</h3><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm start</span><br></pre></td></tr></table></figure><h3 id="三-参数"><a href="#三-参数" class="headerlink" title="三.参数"></a>三.参数</h3><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-h --help帮助</span><br><span class="line">-V --version 版本号</span><br><span class="line">-e --ejs 添加ejs模板引擎支持(默认是jade)</span><br><span class="line">--hbs 添加hbs模板引擎支持(默认是hbs) -H --hogan 添加hogan.js支持</span><br><span class="line">-c --css <span class="xml"><span class="tag">&lt;<span class="name">engine</span>&gt;</span></span>添加css样式 支持 less sass styus css(默认是css)</span><br><span class="line">--git 添加 .gitignore</span><br><span class="line">-f --force force on non-empty directory</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> koa </category>
          
      </categories>
      
      
        <tags>
            
            <tag> koa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>less压缩编译css</title>
      <link href="/2020/03/18/other/less/"/>
      <url>/2020/03/18/other/less/</url>
      
        <content type="html"><![CDATA[<p>使用npm包管理工具安装Less编译器</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install less -g</span><br></pre></td></tr></table></figure><p>//下面命令用于安装css压缩插件</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install less-plugin-clean-css -g</span><br></pre></td></tr></table></figure><p>安装完成后就可以使用lessc的命令了</p><p>Less编译器用法：</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lessc bootstrap.less bootstrap.css</span><br></pre></td></tr></table></figure><p>下面命令启用css压缩插件，生成压缩后的css文件</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lessc styles.less styles.min.css -clean-css</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 压缩 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js压缩 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用uglifyjs压缩JS</title>
      <link href="/2020/03/18/other/uglifyjs/"/>
      <url>/2020/03/18/other/uglifyjs/</url>
      
        <content type="html"><![CDATA[<h3 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h3><p>UglifyJS是个包含JS代码最小化、压缩工具集。</p><p> <strong><em>UglifyJS目前只能压缩JS代码，且只支持到ES5语法，尚不支持ES6。</em></strong></p><h3 id="2、安装"><a href="#2、安装" class="headerlink" title="2、安装"></a>2、安装</h3><p>UglifyJS基于Node.js开发，所以首先确保安装了Node.js环境。</p><p>如果想以一个独立命令的方式运行，则使用以下命令安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install uglify-js -g</span><br></pre></td></tr></table></figure><p>安装完成后，输入 uglifyjs -V 查看版本号，检测安装是否成功。<br>如果想作为一个模块通过代码调用，则使用以下命令安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install uglify-js --save-dev</span><br></pre></td></tr></table></figure><h3 id="3、用法"><a href="#3、用法" class="headerlink" title="3、用法"></a>3、用法</h3><p>UglifyJS的命令格式如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uglifyjs [input files] [options]</span><br></pre></td></tr></table></figure><p>输入文件既可以是单个，也可以是多个，建议传参时先传文件，再传选项。UglifyJS会根据传入选项，把文件放在队列中依次解释。</p><p>例如，有一个名为 copy.js的js代码文件如下。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params">argv</span>) </span>&#123;</span><br><span class="line">    fs.createReadStream(argv[<span class="number">0</span>]).pipe(fs.createWriteStream(argv[<span class="number">1</span>]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> args = process.argv.slice(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">if</span> (!!args &amp;&amp; args.length === <span class="number">2</span>) &#123;</span><br><span class="line">    main(args);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'args is invalid.'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们现在来测试UglifyJS的几个常用选项。</p><h4 id="3-1-o-输出"><a href="#3-1-o-输出" class="headerlink" title="3.1 -o 输出"></a>3.1 -o 输出</h4><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uglifyjs copy.js -o min.js</span><br></pre></td></tr></table></figure><p>上面命令传入 copy.js，输出到 min.js，结果如下。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs=<span class="built_in">require</span>(<span class="string">"fs"</span>);<span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params">argv</span>)</span>&#123;fs.createReadStream(argv[<span class="number">0</span>]).pipe(fs.createWriteStream(argv[<span class="number">1</span>]))&#125;<span class="keyword">var</span> args=process.argv.slice(<span class="number">2</span>);<span class="keyword">if</span>(!!args&amp;&amp;args.length===<span class="number">2</span>)&#123;main(args)&#125;</span><br></pre></td></tr></table></figure><p>可以看到，效果是代码去空格且合并到一行，但函数和变量名都不变。</p><h4 id="3-2-c-压缩"><a href="#3-2-c-压缩" class="headerlink" title="3.2 -c 压缩"></a>3.2 -c 压缩</h4><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uglifyjs copy.js -c -o min.js</span><br></pre></td></tr></table></figure><p>上面命令传入 copy.js，压缩输出到 min.js，结果如下。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs=<span class="built_in">require</span>(<span class="string">"fs"</span>);<span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params">argv</span>)</span>&#123;fs.createReadStream(argv[<span class="number">0</span>]).pipe(fs.createWriteStream(argv[<span class="number">1</span>]))&#125;<span class="keyword">var</span> args=process.argv.slice(<span class="number">2</span>);args&amp;&amp;<span class="number">2</span>===args.length&amp;&amp;main(args);</span><br></pre></td></tr></table></figure><p>和上一命令的效果基本相同，但把 if语句简化了。</p><h4 id="3-3-m-混淆"><a href="#3-3-m-混淆" class="headerlink" title="3.3 -m 混淆"></a>3.3 -m 混淆</h4><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uglifyjs copy.js -m -c -o min.js</span><br></pre></td></tr></table></figure><p>上面命令传入 copy.js，混淆+压缩输出到 min.js，结果如下。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs=<span class="built_in">require</span>(<span class="string">"fs"</span>);<span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params">r</span>)</span>&#123;fs.createReadStream(r[<span class="number">0</span>]).pipe(fs.createWriteStream(r[<span class="number">1</span>]))&#125;<span class="keyword">var</span> args=process.argv.slice(<span class="number">2</span>);args&amp;&amp;<span class="number">2</span>===args.length&amp;&amp;main(args);</span><br></pre></td></tr></table></figure><p>可以看到，混淆+压缩的效果，就是在前面基础上，把函数参数用最简字母代替了。</p><p>整体说来，UglifyJS的混淆比较轻量，只是简化了函数参数和变量名，而不会修改语法树。</p><h4 id="3-4-输入多文件"><a href="#3-4-输入多文件" class="headerlink" title="3.4 输入多文件"></a>3.4 输入多文件</h4><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uglifyjs copy.js copy2.js -m -c -o min.js</span><br></pre></td></tr></table></figure><p>上面命令传入 copy.js、 copy2.js，混淆+压缩输出到 min.js，结果如下。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs=<span class="built_in">require</span>(<span class="string">"fs"</span>);<span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params">e</span>)</span>&#123;fs.createReadStream(e[<span class="number">0</span>]).pipe(fs.createWriteStream(e[<span class="number">1</span>]))&#125;(args=process.argv.slice(<span class="number">2</span>))&amp;&amp;<span class="number">2</span>===args.length&amp;&amp;main(args);<span class="keyword">var</span> args;fs=<span class="built_in">require</span>(<span class="string">"fs"</span>);<span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params">e</span>)</span>&#123;fs.createReadStream(e[<span class="number">0</span>]).pipe(fs.createWriteStream(e[<span class="number">1</span>]))&#125;(args=process.argv.slice(<span class="number">2</span>))&amp;&amp;<span class="number">2</span>===args.length&amp;&amp;main(args);<span class="string">`</span></span><br></pre></td></tr></table></figure><p>可以看到，效果就是在前面基础上，把多个输入文件顺序合并到同一行了，同时对变量重复命名做了规避。</p>]]></content>
      
      
      <categories>
          
          <category> 压缩 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js压缩 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML中访问图片资源403问题</title>
      <link href="/2020/03/18/other/img403/"/>
      <url>/2020/03/18/other/img403/</url>
      
        <content type="html"><![CDATA[<h2 id="经过"><a href="#经过" class="headerlink" title="经过"></a>经过</h2><p>网站建设过程中，请求其他网站的图片，通过img的src加载时，报403。但是这个图片地址直接复制出来在地址栏打开是可以看到的。</p><p><img src="https://upload-images.jianshu.io/upload_images/3957667-19369bd22e528e66.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="16C25717-3336-4CC0-A9B3-941259C9C553.png"></p><p>解决方法： 在HTML代码的head中添加</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"referrer"</span> <span class="attr">content</span>=<span class="string">"no-referrer"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><h2 id="http请求中的referrer"><a href="#http请求中的referrer" class="headerlink" title="http请求中的referrer"></a>http请求中的referrer</h2><ul><li>http请求体的header中有一个referrer字段，用来表示发起http请求的源地址信息，这个referrer信息是可以省略但是不可修改的，就是说你只能设置是否带上这个referrer信息，不能定制referrer里面的值。</li><li>服务器端在拿到这个referrer值后就可以进行相关的处理，比如图片资源，可以通过referrer值判断请求是否来自本站，若不是则返回403或者重定向返回其他信息，从而实现图片的防盗链。上面出现403就是因为，请求的是别人服务器上的资源，但把自己的referrer信息带过去了，被对方服务器拦截返回了403。</li><li>在前端可以通过meta来设置referrer policy(来源策略)，具体可以设置哪些值以及对应的结果参考<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Referrer-Policy" target="_blank" rel="noopener">这里</a>。所以针对上面的403情况的解决方法，就是把referrer设置成<code>no-referrer</code>，这样发送请求不会带上referrer信息，对方服务器也就无法拦截了。</li><li>浏览器中referrer默认的值是no-referrer-when-downgrade，就是除了降级请求的情况以外都会带上referrer信息。降级请求是指https协议的地址去请求http协议，所以上面403的情况还有另一种解决方法就是，请求的图片地址换成http协议，自己的地址使用http协议，这样降级请求也不会带上referrer。</li></ul><h2 id="nginx配置图片防盗链"><a href="#nginx配置图片防盗链" class="headerlink" title="nginx配置图片防盗链"></a>nginx配置图片防盗链</h2><ul><li>最后再说一下这种根据referrer拦截，在服务器如何配置。我自己服务器用的nginx，这里就说下nginx的配置。首先打开nginx的配置文件:conf/nginx.conf，在server下面添加如下:<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> <span class="regexp">~* \.(gif|jpg|png|jpeg)$</span> &#123;</span><br><span class="line">   <span class="attribute">valid_referers</span> <span class="literal">none</span>  valid.url.com;</span><br><span class="line">   <span class="attribute">if</span> (<span class="variable">$invalid_referer</span>) &#123;</span><br><span class="line">        <span class="attribute">return</span> <span class="number">403</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>首先第一句以文件格式后缀匹配出图片资源路径，然后通过valid_referers添加合法的referer地址，加上none，表示没有传referer也是合法的，最后referer不合法的情况返回403。如果想跳其他地址或返回其他图片资源可以这样：rewrite xxx.xxx.com/xxx.jpg。</li></ul><h2 id="origin"><a href="#origin" class="headerlink" title="origin"></a>origin</h2><ul><li>http头部中还有一个与referrer类似的叫origin的字段，在发送跨域请求或预检请求(preflight request)时会带上这个参数，他用来表示发起请求的服务器地址，这个参数是必定会传的，然后服务器端用此字段来判断是否允许跨域。</li></ul>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图片访问403 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>escape、encodeURI和encodeURIComponent的区别</title>
      <link href="/2020/03/18/other/encodeURI/"/>
      <url>/2020/03/18/other/encodeURI/</url>
      
        <content type="html"><![CDATA[<h3 id="1、escape"><a href="#1、escape" class="headerlink" title="1、escape"></a>1、escape</h3><p>escape是对字符串(string)进行编码(而另外两种是对URL)，作用是让它们在所有电脑上可读。<br>编码之后的效果是%XX或者%uXXXX这种形式。<br>其中 ASCII字母、数字、@*/+ ，这几个字符不会被编码，其余的都会。<br>对应的解码unescape。<br>最关键的是，当你需要对URL编码时，请忘记这个方法，这个方法是针对字符串使用的，不适用于URL。</p><h3 id="2、encodeURI和encodeURIComponent"><a href="#2、encodeURI和encodeURIComponent" class="headerlink" title="2、encodeURI和encodeURIComponent"></a>2、encodeURI和encodeURIComponent</h3><p>对URL编码是常见的事，所以这两个方法应该是实际中要特别注意的。<br>它们都是编码URL，唯一区别就是编码的字符范围，其中:</p> <figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">encodeURI 方法不会对下列字符编码 ASCII字母、数字、~!@#$&amp;*()=:/,;?+'</span><br><span class="line">encodeURIComponent 方法不会对下列字符编码 ASCII字母、数字、~!*()'</span><br></pre></td></tr></table></figure><p>也就是encodeURIComponent编码的范围更广，会将 http://abc.com 中的//也编码， 会导致URL不可用。</p> <figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">encodeURI 对应的解码：decodeURI</span><br><span class="line">encodeURIComponent 对应的解码：decodeURIComponent</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> escape </tag>
            
            <tag> encodeURI </tag>
            
            <tag> encodeURIComponent </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git生成ssh</title>
      <link href="/2020/03/17/git/git-add-ssh/"/>
      <url>/2020/03/17/git/git-add-ssh/</url>
      
        <content type="html"><![CDATA[<h3 id="1、设置Git的user-name和email：-如果是第一次的话"><a href="#1、设置Git的user-name和email：-如果是第一次的话" class="headerlink" title="1、设置Git的user name和email：(如果是第一次的话)"></a>1、设置Git的user name和email：(如果是第一次的话)</h3><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">"pyang"</span></span><br><span class="line">$ git config --global user.email <span class="string">"11111@qq.com"</span></span><br></pre></td></tr></table></figure><p>这里的名字和邮箱 是对应的git的账号名称和注册邮箱</p><h3 id="2、生成密钥"><a href="#2、生成密钥" class="headerlink" title="2、生成密钥"></a>2、生成密钥</h3><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">"11111@qq.com"</span></span><br></pre></td></tr></table></figure><p>连续3个回车。如果不需要密码的话。<br>最后得到了两个文件：id_rsa和id_rsa.pub。</p><h3 id="3、登陆Github-添加-ssh-。"><a href="#3、登陆Github-添加-ssh-。" class="headerlink" title="3、登陆Github, 添加 ssh 。"></a>3、登陆Github, 添加 ssh 。</h3><p>把id_rsa.pub文件里的内容复制到这里<br><img src="/2020/03/17/git/git-add-ssh/1.png" alt="gitd"></p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git生成ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo图片问题</title>
      <link href="/2020/03/17/hexo/hexo-img/"/>
      <url>/2020/03/17/hexo/hexo-img/</url>
      
        <content type="html"><![CDATA[<h3 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h3><p>hexo博客图片的问题在于，markdown文章使用的图片路径和hexo博客发布时的图片路径不一致。</p><p>解决方式是使用 <strong>CodeFalling/hexo-asset-image</strong> 插件。</p><h3 id="1-post-asset-folder"><a href="#1-post-asset-folder" class="headerlink" title="1. post_asset_folder"></a>1. post_asset_folder</h3><p>首先确认_config.yml中有post_asset_folder:true。</p><p>Hexo提供了一种更方便管理Asset的设定：post_asset_folder<br>当您设置post_asset_folder为true参数后，在建立文件时，Hexo<br>会自动建立一个与文章同名的文件夹；以前的文章也可以自己手动创建同名文件夹。</p><h3 id="2-安装-hexo-asset-image-在hexo的目录下执行"><a href="#2-安装-hexo-asset-image-在hexo的目录下执行" class="headerlink" title="2. 安装 hexo-asset-image 在hexo的目录下执行"></a>2. 安装 hexo-asset-image 在hexo的目录下执行</h3><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install https://github.com/CodeFalling/hexo-asset-image --save</span><br></pre></td></tr></table></figure><h3 id="3-使用"><a href="#3-使用" class="headerlink" title="3. 使用"></a>3. 使用</h3><p>完成安装后用hexo新建文章的时候会发现_posts目录下面会多出一个和文章名字一样的文件夹。图片就可以放在文件夹下面。结构如下：</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git</span><br><span class="line">  ├── logo.jpg</span><br><span class="line">git.md</span><br></pre></td></tr></table></figure><p>这样的目录结构（目录名和文章名一致），<br>只要使用 </p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](git/logo.jpg)</span><br></pre></td></tr></table></figure><p>就可以插入图片。其中[]里面不写文字则没有图片标题。<br>生成的结构为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public&#x2F;2016&#x2F;3&#x2F;9&#x2F;git</span><br><span class="line">                ├── index.html</span><br><span class="line">                ├── logo.jpg</span><br></pre></td></tr></table></figure><p>同时，生成的 html 是</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](/2016/3/9/git/logo.jpg)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Hexo文章图片 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客搭建</title>
      <link href="/2020/03/17/hexo/hexo/"/>
      <url>/2020/03/17/hexo/hexo/</url>
      
        <content type="html"><![CDATA[<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>Node.js (Node.js 版本需不低于 8.10，建议使用 Node.js 10.0 及以上版本)</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://github.com/microacup/hexo-theme-microb" target="_blank" rel="noopener">hexo-theme-microb</a></p><p><a href="https://github.com/KevinOfNeu/hexo-theme-xoxo" target="_blank" rel="noopener">hexo-theme-xoxo</a></p><h3 id="快速使用"><a href="#快速使用" class="headerlink" title="快速使用"></a>快速使用</h3><h4 id="配置菜单"><a href="#配置菜单" class="headerlink" title="配置菜单"></a>配置菜单</h4><p>  在主题<code>_config.yml</code> 中配置menu选项：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># main menu navigation</span><br><span class="line">menu:</span><br><span class="line">  home: &#x2F;</span><br><span class="line">  tags: &#x2F;tags</span><br><span class="line">  search: &#x2F;search</span><br><span class="line">  about: &#x2F;about</span><br><span class="line">  # archives: &#x2F;archives</span><br></pre></td></tr></table></figure><p>&nbsp;</p><h4 id="创建页面"><a href="#创建页面" class="headerlink" title="创建页面"></a>创建页面</h4><p>  hexo中创建页面，需要手动在source文件夹下创建对应的目录和index.md文件。例如about页面：</p><p>  /source/about/index.md</p>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 关于俺</span><br><span class="line">date: 2016-05-24 13:45:13</span><br><span class="line">type: "about"</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>  配置说明：</p><blockquote><p>type: 页面类型，参考hexo文档</p><p>title: about页面的title标签，如果没有默认为About</p></blockquote><p>&nbsp;</p><h4 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h4><p>  搜索使用了插件hexo-generator-tag，必须先npm install</p><p>  在文章头部声明标签：</p>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: ES6/ES7参考手册</span><br><span class="line">date: 2016-12-23 16:08:28</span><br><span class="line">category:</span><br><span class="line"><span class="bullet">- </span>前端</span><br><span class="line">tags:</span><br><span class="line"><span class="bullet">- </span>es6</span><br><span class="line"><span class="bullet">- </span>手册</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>&nbsp;</p><h4 id="搜索页"><a href="#搜索页" class="headerlink" title="搜索页"></a>搜索页</h4><p>  搜索使用了插件<a href="https://github.com/PaicHyperionDev/hexo-generator-search" target="_blank" rel="noopener">hexo-generator-search</a> . 必须先npm install </p><p>  a、npm install hexo-generator-search –save</p><p>  b、在主目录<code>_config.yml</code>配置搜索选项</p>  <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br></pre></td></tr></table></figure><p>  c、参考创建页面创建search文件。</p><p>&nbsp;</p><h4 id="配置多语言（可选）"><a href="#配置多语言（可选）" class="headerlink" title="配置多语言（可选）"></a>配置多语言（可选）</h4><p>  menu配置中为<code>key:value</code> 格式，key支持多语言配置，翻译文件在languages文件夹下。</p><p>&nbsp;</p><h4 id="站点统计"><a href="#站点统计" class="headerlink" title="站点统计"></a>站点统计</h4><p>  支持百度统计和google统计，在主目录中配置</p>  <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">google_analytics:</span> <span class="string">UA-xxxx</span></span><br><span class="line"><span class="attr">baidu_analytics:</span> <span class="string">xxxx</span></span><br></pre></td></tr></table></figure><h3 id="部署在子目录"><a href="#部署在子目录" class="headerlink" title="部署在子目录"></a>部署在子目录</h3><p>如果你更希望你的站点部署在 &lt;你的 GitHub 用户名&gt;.github.io 的子目录中，<br>你的 repository 需要直接命名为子目录的名字，<br>这样你的站点可以通过 https://&lt;你的 GitHub 用户名&gt;.github.io/&lt;repository 的名字&gt; 访问。<br>你需要检查你的 Hexo 配置文件，将 url 修改为 https://&lt;你的 GitHub 用户名&gt;.github.io/&lt;repository 的名字&gt;、<br>将 root 的值修改为 /&lt;repository 的名字&gt;/</p><p>&nbsp;</p><h3 id="部署到仓库"><a href="#部署到仓库" class="headerlink" title="部署到仓库"></a>部署到仓库</h3><p>使用 hexo-deployer-git 部署到仓库</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>修改根目录下的 _config.yml,</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/&lt;username&gt;/&lt;project&gt;</span><br><span class="line">  # example, https://github.com/hexojs/hexojs.github.io</span><br><span class="line">  branch: gh-pages</span><br></pre></td></tr></table></figure><p>执行部署</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo deploy</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitBook使用概述</title>
      <link href="/2020/03/12/gitbook/GitBook%E4%BD%BF%E7%94%A8%E6%A6%82%E8%BF%B0/"/>
      <url>/2020/03/12/gitbook/GitBook%E4%BD%BF%E7%94%A8%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="GitBook使用概述"><a href="#GitBook使用概述" class="headerlink" title="GitBook使用概述"></a>GitBook使用概述</h2><p>参考文章</p><p><a href="https://snowdreams1006.github.io/myGitbook/experience/gitbook-cli.html#" target="_blank" rel="noopener">https://snowdreams1006.github.io/myGitbook</a><br><a href="https://einverne.github.io/gitbook-tutorial/" target="_blank" rel="noopener">https://einverne.github.io/gitbook-tutorial/</a></p><h2 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h2><p>GitBook 是一个基于 Node.js 的命令行工具，可使用 Github/Git 和 Markdown来制作精美的电子书，GitBook 并非关于 [Git]的教程。</p><blockquote><p>node 环境</p></blockquote><p>执行 gitbook init时， 发现报错如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Error loading version latest: Error: Cannot find module &#39;internal&#x2F;util&#x2F;types&#39;</span><br><span class="line">    at Function.Module._resolveFilename (module.js:538:15)</span><br><span class="line">    at Function.Module._load (module.js:468:25)</span><br><span class="line">    at Module.require (module.js:587:17)</span><br><span class="line">    at require (internal&#x2F;module.js:11:18)</span><br><span class="line">    at evalmachine.&lt;anonymous&gt;:31:26</span><br><span class="line">    at Object.&lt;anonymous&gt; (&#x2F;Users&#x2F;vspt&#x2F;.gitbook&#x2F;versions&#x2F;2.6.6&#x2F;node_modules&#x2F;graceful-fs&#x2F;fs.js:11:1)</span><br><span class="line">    at Module._compile (module.js:643:30)</span><br><span class="line">    at Object.Module._extensions..js (module.js:654:10)</span><br><span class="line">    at Module.load (module.js:556:32)</span><br><span class="line">    at tryModuleLoad (module.js:499:12)</span><br><span class="line"></span><br><span class="line">TypeError: Cannot read property &#39;commands&#39; of null</span><br></pre></td></tr></table></figure><p>问题原因 Gitbook 只支持 node 6.x.x版本，node版本不对，使用n或者nvm切换node版本重新安装 gitbook-cli</p><h2 id="二、安装gitbook-cli"><a href="#二、安装gitbook-cli" class="headerlink" title="二、安装gitbook-cli"></a>二、安装gitbook-cli</h2><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g gitbook-cli</span><br></pre></td></tr></table></figure><h2 id="三、初始化"><a href="#三、初始化" class="headerlink" title="三、初始化"></a>三、初始化</h2><p>新建gitbook-demo文件夹，初始化：</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitbook init</span><br></pre></td></tr></table></figure><h2 id="四、目录"><a href="#四、目录" class="headerlink" title="四、目录"></a>四、目录</h2><blockquote><p>README.md —— 书籍的介绍写在这个文件里<br>SUMMARY.md —— 书籍的目录结构在这里配置</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/3957667-8bb253a32f5cbbb2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="QQ20200115-161730.png"></p><h2 id="五、编辑SUMMARY-md"><a href="#五、编辑SUMMARY-md" class="headerlink" title="五、编辑SUMMARY.md"></a>五、编辑SUMMARY.md</h2><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 目录 SUMMARY.md</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>[<span class="string">前言</span>](<span class="link">README.md</span>)</span><br><span class="line"><span class="bullet">* </span>[<span class="string">第一章</span>](<span class="link">Chapter1/README.md</span>)</span><br><span class="line"><span class="bullet">  * </span>[<span class="string">第1节：1</span>](<span class="link">Chapter1/1.md</span>)</span><br><span class="line"><span class="bullet">  * </span>[<span class="string">第2节：2</span>](<span class="link">Chapter1/2.md</span>)</span><br><span class="line"><span class="bullet">  * </span>[<span class="string">第3节：3</span>](<span class="link">Chapter1/3.md</span>)</span><br><span class="line"><span class="bullet">  * </span>[<span class="string">第4节：4</span>](<span class="link">Chapter1/4.md</span>)</span><br><span class="line"><span class="bullet">* </span>[<span class="string">第二章</span>](<span class="link">Chapter2/README.md</span>)</span><br><span class="line"><span class="bullet">* </span>[<span class="string">第三章</span>](<span class="link">Chapter3/README.md</span>)</span><br><span class="line"><span class="bullet">* </span>[<span class="string">第四章</span>](<span class="link">Chapter4/README.md</span>)</span><br></pre></td></tr></table></figure><p>再次执行gitbook init，根据SUMMARY.md里的章节内容，创建新的文件夹和md文件。<br><img src="https://upload-images.jianshu.io/upload_images/3957667-88b666fc18dbe134.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="QQ20200115-162624.png"></p><h2 id="六、启动-gitbook-项目"><a href="#六、启动-gitbook-项目" class="headerlink" title="六、启动 gitbook 项目"></a>六、启动 gitbook 项目</h2><p>启动本地服务: gitbook serve</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitbook serve</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/3957667-628e4d3060c2cc9d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="QQ20200115-163829@2x.png"></p><p>程序无报错则可以在浏览器预览电子书效果: <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 。能够实时预览电子书效果。</p><h2 id="七、构建-gitbook-静态网页"><a href="#七、构建-gitbook-静态网页" class="headerlink" title="七、构建 gitbook 静态网页"></a>七、构建 gitbook 静态网页</h2><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitbook build</span><br></pre></td></tr></table></figure><p>构建静态网页而不启动本地服务器,默认生成文件存放在 _book/ 目录，输出静态网页后可打包上传到服务器，也可以上传到 github 等网站进行托管,因而主要用于发布准备阶段。</p><p>&nbsp;</p><h2 id="八、总结"><a href="#八、总结" class="headerlink" title="八、总结"></a>八、总结</h2> <figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">gitbook init   <span class="comment">##初始化 README.md 和 SUMMARY.md 两个文件. </span></span><br><span class="line">gitbook serve  <span class="comment">##本地构建并运行服务,默认访问 http://localhost:4000 实时预览。</span></span><br><span class="line"></span><br><span class="line">gitbook install  <span class="comment">##安装当前项目所需插件</span></span><br><span class="line">gitbook install [book] <span class="comment">##安装指定插件</span></span><br><span class="line"></span><br><span class="line">gitbook build  <span class="comment">##构建书籍：默认：将生成的静态网站输出到 _book 目录</span></span><br><span class="line">gitbook build  [书籍路径] [输出路径] <span class="comment">##指定路径</span></span><br><span class="line"></span><br><span class="line">gitbook serve --port 2333  <span class="comment">##指定端口</span></span><br><span class="line">gitbook pdf ./ ./mybook.pdf   <span class="comment">##生成pdf格式</span></span><br><span class="line">gitbook epub ./ ./mybook.epub <span class="comment">##生成epub格式</span></span><br><span class="line">gitbook mobi ./ ./mybook.mobi  <span class="comment">##生成mobi格式</span></span><br></pre></td></tr></table></figure><h2 id="九、部署到gitHub-pages"><a href="#九、部署到gitHub-pages" class="headerlink" title="九、部署到gitHub pages"></a>九、部署到gitHub pages</h2><p>执行 gitbook build 之后 默认将生成的静态网站输出到 _book 目录</p><p>新建一个仓库如gitbook-demo，并创建一个分支（分支名必须为gh-pages）。 </p><ol><li><p>可以直接将_book目录下的所有文件直接复制到分支gh-pages项目里，然后git提交到远程仓库。</p></li><li><p>使用 gh-pages。安装 npm install gh-pages -g。</p><p> gh-pages –help  查看帮助</p><p> 使用命令 </p> <figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gh-pages -d _book -r git@github.com:xxxxx/gitbook-demo.git</span><br></pre></td></tr></table></figure><p> 上面这条命令将_book下的所有文件提交到gitbook-demo仓库的gh-pages分支上。</p><p> 所以可以如下操作：</p> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">        <span class="attr">"build"</span>: <span class="string">"gitbook build"</span>,</span><br><span class="line">        <span class="attr">"serve"</span>: <span class="string">"gitbook serve"</span>,</span><br><span class="line">        <span class="attr">"deploy"</span>: <span class="string">"gitbook build  &amp;&amp; gh-pages -d _book -r git@github.com:xxxxx/gitbook-demo.git"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Gitbook </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gitbook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git的常用操作</title>
      <link href="/2020/03/10/git/git/"/>
      <url>/2020/03/10/git/git/</url>
      
        <content type="html"><![CDATA[<h3 id="Git-常用操作"><a href="#Git-常用操作" class="headerlink" title="Git 常用操作"></a>Git 常用操作</h3><h4 id="上传新项目到远程"><a href="#上传新项目到远程" class="headerlink" title="上传新项目到远程"></a>上传新项目到远程</h4><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># …or create a new repository on the command line</span></span><br><span class="line">git init</span><br><span class="line">git add README.md</span><br><span class="line">git commit -m <span class="string">"first commit"</span></span><br><span class="line">git remote add origin git@github.com:xxx/xxxx.git</span><br><span class="line">git push -u origin master</span><br><span class="line">                </span><br><span class="line"><span class="comment"># …or push an existing repository from the command line</span></span><br><span class="line">git remote add origin git@github.com:xxx/xxx.git</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><h4 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h4><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch -D XXX   //强制删除本地分支</span><br><span class="line">git push origin  :XXXX   //删除远程分支 需要切换到其它分支</span><br></pre></td></tr></table></figure><h4 id="Git-pull-强制覆盖本地文件"><a href="#Git-pull-强制覆盖本地文件" class="headerlink" title="Git pull 强制覆盖本地文件"></a>Git pull 强制覆盖本地文件</h4><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git fetch --all</span><br><span class="line">git reset --hard origin/master</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure><h4 id="Git-强制push本地代码到远端"><a href="#Git-强制push本地代码到远端" class="headerlink" title="Git 强制push本地代码到远端"></a>Git 强制push本地代码到远端</h4><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -f origin master</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
